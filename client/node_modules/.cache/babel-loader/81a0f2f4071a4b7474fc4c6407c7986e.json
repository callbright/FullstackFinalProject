{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { getDaysInMonth } from \"./getDaysInMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * @name setMonth\r\n * @category Month Helpers\r\n * @summary Set the month to the given date.\r\n *\r\n * @description\r\n * Set the month to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param month - The month index to set (0-11)\r\n *\r\n * @returns The new date with the month set\r\n *\r\n * @example\r\n * // Set February to 1 September 2014:\r\n * const result = setMonth(new Date(2014, 8, 1), 1)\r\n * //=> Sat Feb 01 2014 00:00:00\r\n */\n\nexport function setMonth(date, month) {\n  const _date = toDate(date);\n\n  const year = _date.getFullYear();\n\n  const day = _date.getDate();\n\n  const dateWithDesiredMonth = constructFrom(date, 0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  const daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  _date.setMonth(month, Math.min(day, daysInMonth));\n\n  return _date;\n} // Fallback for modularized imports:\n\nexport default setMonth;","map":{"version":3,"names":["constructFrom","getDaysInMonth","toDate","setMonth","date","month","_date","year","getFullYear","day","getDate","dateWithDesiredMonth","setFullYear","setHours","daysInMonth","Math","min"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/setMonth.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { getDaysInMonth } from \"./getDaysInMonth.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name setMonth\r\n * @category Month Helpers\r\n * @summary Set the month to the given date.\r\n *\r\n * @description\r\n * Set the month to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param month - The month index to set (0-11)\r\n *\r\n * @returns The new date with the month set\r\n *\r\n * @example\r\n * // Set February to 1 September 2014:\r\n * const result = setMonth(new Date(2014, 8, 1), 1)\r\n * //=> Sat Feb 01 2014 00:00:00\r\n */\r\nexport function setMonth(date, month) {\r\n  const _date = toDate(date);\r\n  const year = _date.getFullYear();\r\n  const day = _date.getDate();\r\n\r\n  const dateWithDesiredMonth = constructFrom(date, 0);\r\n  dateWithDesiredMonth.setFullYear(year, month, 15);\r\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\r\n  const daysInMonth = getDaysInMonth(dateWithDesiredMonth);\r\n  // Set the last day of the new month\r\n  // if the original date was the last day of the longer month\r\n  _date.setMonth(month, Math.min(day, daysInMonth));\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setMonth;\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+B;EACpC,MAAMC,KAAK,GAAGJ,MAAM,CAACE,IAAD,CAApB;;EACA,MAAMG,IAAI,GAAGD,KAAK,CAACE,WAAN,EAAb;;EACA,MAAMC,GAAG,GAAGH,KAAK,CAACI,OAAN,EAAZ;;EAEA,MAAMC,oBAAoB,GAAGX,aAAa,CAACI,IAAD,EAAO,CAAP,CAA1C;EACAO,oBAAoB,CAACC,WAArB,CAAiCL,IAAjC,EAAuCF,KAAvC,EAA8C,EAA9C;EACAM,oBAAoB,CAACE,QAArB,CAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC;EACA,MAAMC,WAAW,GAAGb,cAAc,CAACU,oBAAD,CAAlC,CARoC,CASpC;EACA;;EACAL,KAAK,CAACH,QAAN,CAAeE,KAAf,EAAsBU,IAAI,CAACC,GAAL,CAASP,GAAT,EAAcK,WAAd,CAAtB;;EACA,OAAOR,KAAP;AACD,C,CAED;;AACA,eAAeH,QAAf"},"metadata":{},"sourceType":"module"}