{"ast":null,"code":"import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/auth-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, FunctionRegion } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\r\n * Creates a new Supabase Client.\r\n */\n\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n  return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};","map":{"version":3,"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAGA,cAAc,mBAAd;AAQA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,cAJF,EAMEC,cANF,QAOO,wBAPP;AAQA,cAAc,uBAAd;AACA,SAASC,OAAO,IAAIN,cAApB,QAA0C,kBAA1C;AAGA;;;;AAGA,OAAO,MAAMO,YAAY,GAAG,CAS1BC,WAT0B,EAU1BC,WAV0B,EAW1BC,OAX0B,KAYsB;EAChD,OAAO,IAAIV,cAAJ,CAAiDQ,WAAjD,EAA8DC,WAA9D,EAA2EC,OAA3E,CAAP;AACD,CAdM","names":["SupabaseClient","FunctionsHttpError","FunctionsFetchError","FunctionsRelayError","FunctionsError","FunctionRegion","default","createClient","supabaseUrl","supabaseKey","options"],"sources":["C:\\Users\\Lions\\final-project-callbright-1\\client\\node_modules\\@supabase\\supabase-js\\src\\index.ts"],"sourcesContent":["import SupabaseClient from './SupabaseClient'\r\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\r\n\r\nexport * from '@supabase/auth-js'\r\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/auth-js'\r\nexport type {\r\n  PostgrestResponse,\r\n  PostgrestSingleResponse,\r\n  PostgrestMaybeSingleResponse,\r\n  PostgrestError,\r\n} from '@supabase/postgrest-js'\r\nexport {\r\n  FunctionsHttpError,\r\n  FunctionsFetchError,\r\n  FunctionsRelayError,\r\n  FunctionsError,\r\n  FunctionInvokeOptions,\r\n  FunctionRegion,\r\n} from '@supabase/functions-js'\r\nexport * from '@supabase/realtime-js'\r\nexport { default as SupabaseClient } from './SupabaseClient'\r\nexport type { SupabaseClientOptions, QueryResult, QueryData, QueryError } from './lib/types'\r\n\r\n/**\r\n * Creates a new Supabase Client.\r\n */\r\nexport const createClient = <\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n>(\r\n  supabaseUrl: string,\r\n  supabaseKey: string,\r\n  options?: SupabaseClientOptions<SchemaName>\r\n): SupabaseClient<Database, SchemaName, Schema> => {\r\n  return new SupabaseClient<Database, SchemaName, Schema>(supabaseUrl, supabaseKey, options)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}