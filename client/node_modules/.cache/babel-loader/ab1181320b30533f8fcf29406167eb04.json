{"ast":null,"code":"import { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n/**\r\n * The {@link formatISO9075} function options.\r\n */\n\n/**\r\n * @name formatISO9075\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18 19:00:52'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075, short format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918 190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, date only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, time only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52'\r\n */\n\nexport function formatISO9075(date, options) {\n  var _options$format, _options$representati;\n\n  var _date = toDate(date);\n\n  if (!isValid(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  var format = (_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : \"extended\";\n  var representation = (_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : \"complete\";\n  var result = \"\";\n  var dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  var timeDelimiter = format === \"extended\" ? \":\" : \"\"; // Representation is either 'date' or 'complete'\n\n  if (representation !== \"time\") {\n    var day = addLeadingZeros(_date.getDate(), 2);\n    var month = addLeadingZeros(_date.getMonth() + 1, 2);\n    var year = addLeadingZeros(_date.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== \"date\") {\n    var hour = addLeadingZeros(_date.getHours(), 2);\n    var minute = addLeadingZeros(_date.getMinutes(), 2);\n    var second = addLeadingZeros(_date.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === \"\" ? \"\" : \" \"; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n} // Fallback for modularized imports:\n\nexport default formatISO9075;","map":{"version":3,"names":["isValid","toDate","addLeadingZeros","formatISO9075","date","options","_date","RangeError","format","representation","result","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","separator"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/formatISO9075.mjs"],"sourcesContent":["import { isValid } from \"./isValid.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\r\n\r\n/**\r\n * The {@link formatISO9075} function options.\r\n */\r\n\r\n/**\r\n * @name formatISO9075\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18 19:00:52'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075, short format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918 190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, date only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, time only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52'\r\n */\r\nexport function formatISO9075(date, options) {\r\n  const _date = toDate(date);\r\n\r\n  if (!isValid(_date)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const format = options?.format ?? \"extended\";\r\n  const representation = options?.representation ?? \"complete\";\r\n\r\n  let result = \"\";\r\n\r\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\r\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\r\n\r\n  // Representation is either 'date' or 'complete'\r\n  if (representation !== \"time\") {\r\n    const day = addLeadingZeros(_date.getDate(), 2);\r\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\r\n    const year = addLeadingZeros(_date.getFullYear(), 4);\r\n\r\n    // yyyyMMdd or yyyy-MM-dd.\r\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\r\n  }\r\n\r\n  // Representation is either 'time' or 'complete'\r\n  if (representation !== \"date\") {\r\n    const hour = addLeadingZeros(_date.getHours(), 2);\r\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\r\n    const second = addLeadingZeros(_date.getSeconds(), 2);\r\n\r\n    // If there's also date, separate it with time with a space\r\n    const separator = result === \"\" ? \"\" : \" \";\r\n\r\n    // HHmmss or HH:mm:ss.\r\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatISO9075;\r\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;EAAA;;EAC3C,IAAMC,KAAK,GAAGL,MAAM,CAACG,IAAD,CAApB;;EAEA,IAAI,CAACJ,OAAO,CAACM,KAAD,CAAZ,EAAqB;IACnB,MAAM,IAAIC,UAAJ,CAAe,oBAAf,CAAN;EACD;;EAED,IAAMC,MAAM,sBAAGH,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,MAAZ,6DAAsB,UAAlC;EACA,IAAMC,cAAc,4BAAGJ,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,cAAZ,yEAA8B,UAAlD;EAEA,IAAIC,MAAM,GAAG,EAAb;EAEA,IAAMC,aAAa,GAAGH,MAAM,KAAK,UAAX,GAAwB,GAAxB,GAA8B,EAApD;EACA,IAAMI,aAAa,GAAGJ,MAAM,KAAK,UAAX,GAAwB,GAAxB,GAA8B,EAApD,CAb2C,CAe3C;;EACA,IAAIC,cAAc,KAAK,MAAvB,EAA+B;IAC7B,IAAMI,GAAG,GAAGX,eAAe,CAACI,KAAK,CAACQ,OAAN,EAAD,EAAkB,CAAlB,CAA3B;IACA,IAAMC,KAAK,GAAGb,eAAe,CAACI,KAAK,CAACU,QAAN,KAAmB,CAApB,EAAuB,CAAvB,CAA7B;IACA,IAAMC,IAAI,GAAGf,eAAe,CAACI,KAAK,CAACY,WAAN,EAAD,EAAsB,CAAtB,CAA5B,CAH6B,CAK7B;;IACAR,MAAM,aAAMO,IAAN,SAAaN,aAAb,SAA6BI,KAA7B,SAAqCJ,aAArC,SAAqDE,GAArD,CAAN;EACD,CAvB0C,CAyB3C;;;EACA,IAAIJ,cAAc,KAAK,MAAvB,EAA+B;IAC7B,IAAMU,IAAI,GAAGjB,eAAe,CAACI,KAAK,CAACc,QAAN,EAAD,EAAmB,CAAnB,CAA5B;IACA,IAAMC,MAAM,GAAGnB,eAAe,CAACI,KAAK,CAACgB,UAAN,EAAD,EAAqB,CAArB,CAA9B;IACA,IAAMC,MAAM,GAAGrB,eAAe,CAACI,KAAK,CAACkB,UAAN,EAAD,EAAqB,CAArB,CAA9B,CAH6B,CAK7B;;IACA,IAAMC,SAAS,GAAGf,MAAM,KAAK,EAAX,GAAgB,EAAhB,GAAqB,GAAvC,CAN6B,CAQ7B;;IACAA,MAAM,aAAMA,MAAN,SAAee,SAAf,SAA2BN,IAA3B,SAAkCP,aAAlC,SAAkDS,MAAlD,SAA2DT,aAA3D,SAA2EW,MAA3E,CAAN;EACD;;EAED,OAAOb,MAAP;AACD,C,CAED;;AACA,eAAeP,aAAf"},"metadata":{},"sourceType":"module"}