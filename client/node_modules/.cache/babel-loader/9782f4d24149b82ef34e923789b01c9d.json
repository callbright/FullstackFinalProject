{"ast":null,"code":"import { addQuarters } from \"./addQuarters.mjs\";\nimport { startOfQuarter } from \"./startOfQuarter.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * The {@link eachQuarterOfInterval} function options.\r\n */\n\n/**\r\n * @name eachQuarterOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of quarters within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of quarters within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\r\n *\r\n * @example\r\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\r\n * const result = eachQuarterOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * // ]\r\n */\n\nexport function eachQuarterOfInterval(interval, options) {\n  var _options$step;\n\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var reversed = +startDate > +endDate;\n  var endTime = reversed ? +startOfQuarter(startDate) : +startOfQuarter(endDate);\n  var currentDate = reversed ? startOfQuarter(endDate) : startOfQuarter(startDate);\n  var step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  var dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addQuarters(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n} // Fallback for modularized imports:\n\nexport default eachQuarterOfInterval;","map":{"version":3,"names":["addQuarters","startOfQuarter","toDate","eachQuarterOfInterval","interval","options","startDate","start","endDate","end","reversed","endTime","currentDate","step","dates","push","reverse"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/eachQuarterOfInterval.mjs"],"sourcesContent":["import { addQuarters } from \"./addQuarters.mjs\";\r\nimport { startOfQuarter } from \"./startOfQuarter.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link eachQuarterOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachQuarterOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of quarters within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of quarters within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\r\n *\r\n * @example\r\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\r\n * const result = eachQuarterOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * // ]\r\n */\r\nexport function eachQuarterOfInterval(interval, options) {\r\n  const startDate = toDate(interval.start);\r\n  const endDate = toDate(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed\r\n    ? +startOfQuarter(startDate)\r\n    : +startOfQuarter(endDate);\r\n  let currentDate = reversed\r\n    ? startOfQuarter(endDate)\r\n    : startOfQuarter(startDate);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate = addQuarters(currentDate, step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachQuarterOfInterval;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,OAAzC,EAAkD;EAAA;;EACvD,IAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAACG,KAAV,CAAxB;EACA,IAAMC,OAAO,GAAGN,MAAM,CAACE,QAAQ,CAACK,GAAV,CAAtB;EAEA,IAAIC,QAAQ,GAAG,CAACJ,SAAD,GAAa,CAACE,OAA7B;EACA,IAAMG,OAAO,GAAGD,QAAQ,GACpB,CAACT,cAAc,CAACK,SAAD,CADK,GAEpB,CAACL,cAAc,CAACO,OAAD,CAFnB;EAGA,IAAII,WAAW,GAAGF,QAAQ,GACtBT,cAAc,CAACO,OAAD,CADQ,GAEtBP,cAAc,CAACK,SAAD,CAFlB;EAIA,IAAIO,IAAI,oBAAGR,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEQ,IAAZ,yDAAoB,CAA5B;EACA,IAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;EACX,IAAIA,IAAI,GAAG,CAAX,EAAc;IACZA,IAAI,GAAG,CAACA,IAAR;IACAH,QAAQ,GAAG,CAACA,QAAZ;EACD;;EAED,IAAMI,KAAK,GAAG,EAAd;;EAEA,OAAO,CAACF,WAAD,IAAgBD,OAAvB,EAAgC;IAC9BG,KAAK,CAACC,IAAN,CAAWb,MAAM,CAACU,WAAD,CAAjB;IACAA,WAAW,GAAGZ,WAAW,CAACY,WAAD,EAAcC,IAAd,CAAzB;EACD;;EAED,OAAOH,QAAQ,GAAGI,KAAK,CAACE,OAAN,EAAH,GAAqBF,KAApC;AACD,C,CAED;;AACA,eAAeX,qBAAf"},"metadata":{},"sourceType":"module"}