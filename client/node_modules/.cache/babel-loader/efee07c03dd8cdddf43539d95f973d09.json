{"ast":null,"code":"import _classCallCheck from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DEFAULT_TIMEOUT } from '../lib/constants';\n\nvar Push = /*#__PURE__*/function () {\n  /**\r\n   * Initializes the Push\r\n   *\r\n   * @param channel The Channel\r\n   * @param event The event, for example `\"phx_join\"`\r\n   * @param payload The payload, for example `{user_id: 123}`\r\n   * @param timeout The push timeout in milliseconds\r\n   */\n  function Push(channel, event) {\n    var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_TIMEOUT;\n\n    _classCallCheck(this, Push);\n\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload;\n    this.timeout = timeout;\n    this.sent = false;\n    this.timeoutTimer = undefined;\n    this.ref = '';\n    this.receivedResp = null;\n    this.recHooks = [];\n    this.refEvent = null;\n  }\n\n  _createClass(Push, [{\n    key: \"resend\",\n    value: function resend(timeout) {\n      this.timeout = timeout;\n\n      this._cancelRefEvent();\n\n      this.ref = '';\n      this.refEvent = null;\n      this.receivedResp = null;\n      this.sent = false;\n      this.send();\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      if (this._hasReceived('timeout')) {\n        return;\n      }\n\n      this.startTimeout();\n      this.sent = true;\n      this.channel.socket.push({\n        topic: this.channel.topic,\n        event: this.event,\n        payload: this.payload,\n        ref: this.ref,\n        join_ref: this.channel._joinRef()\n      });\n    }\n  }, {\n    key: \"updatePayload\",\n    value: function updatePayload(payload) {\n      this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n  }, {\n    key: \"receive\",\n    value: function receive(status, callback) {\n      var _a;\n\n      if (this._hasReceived(status)) {\n        callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n      }\n\n      this.recHooks.push({\n        status: status,\n        callback: callback\n      });\n      return this;\n    }\n  }, {\n    key: \"startTimeout\",\n    value: function startTimeout() {\n      var _this = this;\n\n      if (this.timeoutTimer) {\n        return;\n      }\n\n      this.ref = this.channel.socket._makeRef();\n      this.refEvent = this.channel._replyEventName(this.ref);\n\n      var callback = function callback(payload) {\n        _this._cancelRefEvent();\n\n        _this._cancelTimeout();\n\n        _this.receivedResp = payload;\n\n        _this._matchReceive(payload);\n      };\n\n      this.channel._on(this.refEvent, {}, callback);\n\n      this.timeoutTimer = setTimeout(function () {\n        _this.trigger('timeout', {});\n      }, this.timeout);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(status, response) {\n      if (this.refEvent) this.channel._trigger(this.refEvent, {\n        status: status,\n        response: response\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._cancelRefEvent();\n\n      this._cancelTimeout();\n    }\n  }, {\n    key: \"_cancelRefEvent\",\n    value: function _cancelRefEvent() {\n      if (!this.refEvent) {\n        return;\n      }\n\n      this.channel._off(this.refEvent, {});\n    }\n  }, {\n    key: \"_cancelTimeout\",\n    value: function _cancelTimeout() {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = undefined;\n    }\n  }, {\n    key: \"_matchReceive\",\n    value: function _matchReceive(_ref) {\n      var status = _ref.status,\n          response = _ref.response;\n      this.recHooks.filter(function (h) {\n        return h.status === status;\n      }).forEach(function (h) {\n        return h.callback(response);\n      });\n    }\n  }, {\n    key: \"_hasReceived\",\n    value: function _hasReceived(status) {\n      return this.receivedResp && this.receivedResp.status === status;\n    }\n  }]);\n\n  return Push;\n}();\n\nexport { Push as default };","map":{"version":3,"mappings":";;AAAA,SAASA,eAAT,QAAgC,kBAAhC;;IAGqBC,I;EAcnB;;;;;;;;EAQA,cACSC,OADT,EAESC,KAFT,EAI0C;IAAA,IADjCC,OACiC,uEADC,EACD;IAAA,IAAjCC,OAAiC,uEAAfL,eAAe;;IAAA;;IAHjC;IACA;IACA;IACA;IAzBT,YAAgB,KAAhB;IACA,oBAAmCM,SAAnC;IACA,WAAc,EAAd;IACA,oBAGW,IAHX;IAIA,gBAGM,EAHN;IAIA,gBAA0B,IAA1B;EAeI;;;;WAEJ,gBAAOD,OAAP,EAAsB;MACpB,KAAKA,OAAL,GAAeA,OAAf;;MACA,KAAKE,eAAL;;MACA,KAAKC,GAAL,GAAW,EAAX;MACA,KAAKC,QAAL,GAAgB,IAAhB;MACA,KAAKC,YAAL,GAAoB,IAApB;MACA,KAAKC,IAAL,GAAY,KAAZ;MACA,KAAKC,IAAL;IACD;;;WAED,gBAAI;MACF,IAAI,KAAKC,YAAL,CAAkB,SAAlB,CAAJ,EAAkC;QAChC;MACD;;MACD,KAAKC,YAAL;MACA,KAAKH,IAAL,GAAY,IAAZ;MACA,KAAKT,OAAL,CAAaa,MAAb,CAAoBC,IAApB,CAAyB;QACvBC,KAAK,EAAE,KAAKf,OAAL,CAAae,KADG;QAEvBd,KAAK,EAAE,KAAKA,KAFW;QAGvBC,OAAO,EAAE,KAAKA,OAHS;QAIvBI,GAAG,EAAE,KAAKA,GAJa;QAKvBU,QAAQ,EAAE,KAAKhB,OAAL,CAAaiB,QAAb;MALa,CAAzB;IAOD;;;WAED,uBAAcf,OAAd,EAA6C;MAC3C,KAAKA,OAAL,GAAYgB,gCAAQ,KAAKhB,OAAb,GAAyBA,OAAzB,CAAZ;IACD;;;WAED,iBAAQiB,MAAR,EAAwBC,QAAxB,EAA0C;;;MACxC,IAAI,KAAKT,YAAL,CAAkBQ,MAAlB,CAAJ,EAA+B;QAC7BC,QAAQ,CAAC,WAAKZ,YAAL,MAAiB,IAAjB,IAAiBa,aAAjB,GAAiB,MAAjB,GAAiBA,GAAEC,QAApB,CAAR;MACD;;MAED,KAAKC,QAAL,CAAcT,IAAd,CAAmB;QAAEK,MAAM,EAANA,MAAF;QAAUC,QAAQ,EAARA;MAAV,CAAnB;MACA,OAAO,IAAP;IACD;;;WAED,wBAAY;MAAA;;MACV,IAAI,KAAKI,YAAT,EAAuB;QACrB;MACD;;MACD,KAAKlB,GAAL,GAAW,KAAKN,OAAL,CAAaa,MAAb,CAAoBY,QAApB,EAAX;MACA,KAAKlB,QAAL,GAAgB,KAAKP,OAAL,CAAa0B,eAAb,CAA6B,KAAKpB,GAAlC,CAAhB;;MAEA,IAAMc,QAAQ,GAAG,SAAXA,QAAW,CAAClB,OAAD,EAAiB;QAChC,KAAI,CAACG,eAAL;;QACA,KAAI,CAACsB,cAAL;;QACA,KAAI,CAACnB,YAAL,GAAoBN,OAApB;;QACA,KAAI,CAAC0B,aAAL,CAAmB1B,OAAnB;MACD,CALD;;MAOA,KAAKF,OAAL,CAAa6B,GAAb,CAAiB,KAAKtB,QAAtB,EAAgC,EAAhC,EAAoCa,QAApC;;MAEA,KAAKI,YAAL,GAAyBM,UAAU,CAAC,YAAK;QACvC,KAAI,CAACC,OAAL,CAAa,SAAb,EAAwB,EAAxB;MACD,CAFkC,EAEhC,KAAK5B,OAF2B,CAAnC;IAGD;;;WAED,iBAAQgB,MAAR,EAAwBG,QAAxB,EAAqC;MACnC,IAAI,KAAKf,QAAT,EACE,KAAKP,OAAL,CAAagC,QAAb,CAAsB,KAAKzB,QAA3B,EAAqC;QAAEY,MAAM,EAANA,MAAF;QAAUG,QAAQ,EAARA;MAAV,CAArC;IACH;;;WAED,mBAAO;MACL,KAAKjB,eAAL;;MACA,KAAKsB,cAAL;IACD;;;WAEO,2BAAe;MACrB,IAAI,CAAC,KAAKpB,QAAV,EAAoB;QAClB;MACD;;MAED,KAAKP,OAAL,CAAaiC,IAAb,CAAkB,KAAK1B,QAAvB,EAAiC,EAAjC;IACD;;;WAEO,0BAAc;MACpB2B,YAAY,CAAC,KAAKV,YAAN,CAAZ;MACA,KAAKA,YAAL,GAAoBpB,SAApB;IACD;;;WAEO,6BAMP;MAAA,IALCe,MAKD,QALCA,MAKD;MAAA,IAJCG,QAID,QAJCA,QAID;MACC,KAAKC,QAAL,CACGY,MADH,CACU,UAACC,CAAD;QAAA,OAAOA,CAAC,CAACjB,MAAF,KAAaA,MAApB;MAAA,CADV,EAEGkB,OAFH,CAEW,UAACD,CAAD;QAAA,OAAOA,CAAC,CAAChB,QAAF,CAAWE,QAAX,CAAP;MAAA,CAFX;IAGD;;;WAEO,sBAAaH,MAAb,EAA2B;MACjC,OAAO,KAAKX,YAAL,IAAqB,KAAKA,YAAL,CAAkBW,MAAlB,KAA6BA,MAAzD;IACD;;;;;;SA7HkBpB,I","names":["DEFAULT_TIMEOUT","Push","channel","event","payload","timeout","undefined","_cancelRefEvent","ref","refEvent","receivedResp","sent","send","_hasReceived","startTimeout","socket","push","topic","join_ref","_joinRef","Object","status","callback","_a","response","recHooks","timeoutTimer","_makeRef","_replyEventName","_cancelTimeout","_matchReceive","_on","setTimeout","trigger","_trigger","_off","clearTimeout","filter","h","forEach"],"sources":["C:\\Users\\Lions\\FullstackFinalProject\\client\\node_modules\\@supabase\\realtime-js\\src\\lib\\push.ts"],"sourcesContent":["import { DEFAULT_TIMEOUT } from '../lib/constants'\r\nimport type RealtimeChannel from '../RealtimeChannel'\r\n\r\nexport default class Push {\r\n  sent: boolean = false\r\n  timeoutTimer: number | undefined = undefined\r\n  ref: string = ''\r\n  receivedResp: {\r\n    status: string\r\n    response: { [key: string]: any }\r\n  } | null = null\r\n  recHooks: {\r\n    status: string\r\n    callback: Function\r\n  }[] = []\r\n  refEvent: string | null = null\r\n\r\n  /**\r\n   * Initializes the Push\r\n   *\r\n   * @param channel The Channel\r\n   * @param event The event, for example `\"phx_join\"`\r\n   * @param payload The payload, for example `{user_id: 123}`\r\n   * @param timeout The push timeout in milliseconds\r\n   */\r\n  constructor(\r\n    public channel: RealtimeChannel,\r\n    public event: string,\r\n    public payload: { [key: string]: any } = {},\r\n    public timeout: number = DEFAULT_TIMEOUT\r\n  ) {}\r\n\r\n  resend(timeout: number) {\r\n    this.timeout = timeout\r\n    this._cancelRefEvent()\r\n    this.ref = ''\r\n    this.refEvent = null\r\n    this.receivedResp = null\r\n    this.sent = false\r\n    this.send()\r\n  }\r\n\r\n  send() {\r\n    if (this._hasReceived('timeout')) {\r\n      return\r\n    }\r\n    this.startTimeout()\r\n    this.sent = true\r\n    this.channel.socket.push({\r\n      topic: this.channel.topic,\r\n      event: this.event,\r\n      payload: this.payload,\r\n      ref: this.ref,\r\n      join_ref: this.channel._joinRef(),\r\n    })\r\n  }\r\n\r\n  updatePayload(payload: { [key: string]: any }): void {\r\n    this.payload = { ...this.payload, ...payload }\r\n  }\r\n\r\n  receive(status: string, callback: Function) {\r\n    if (this._hasReceived(status)) {\r\n      callback(this.receivedResp?.response)\r\n    }\r\n\r\n    this.recHooks.push({ status, callback })\r\n    return this\r\n  }\r\n\r\n  startTimeout() {\r\n    if (this.timeoutTimer) {\r\n      return\r\n    }\r\n    this.ref = this.channel.socket._makeRef()\r\n    this.refEvent = this.channel._replyEventName(this.ref)\r\n\r\n    const callback = (payload: any) => {\r\n      this._cancelRefEvent()\r\n      this._cancelTimeout()\r\n      this.receivedResp = payload\r\n      this._matchReceive(payload)\r\n    }\r\n\r\n    this.channel._on(this.refEvent, {}, callback)\r\n\r\n    this.timeoutTimer = <any>setTimeout(() => {\r\n      this.trigger('timeout', {})\r\n    }, this.timeout)\r\n  }\r\n\r\n  trigger(status: string, response: any) {\r\n    if (this.refEvent)\r\n      this.channel._trigger(this.refEvent, { status, response })\r\n  }\r\n\r\n  destroy() {\r\n    this._cancelRefEvent()\r\n    this._cancelTimeout()\r\n  }\r\n\r\n  private _cancelRefEvent() {\r\n    if (!this.refEvent) {\r\n      return\r\n    }\r\n\r\n    this.channel._off(this.refEvent, {})\r\n  }\r\n\r\n  private _cancelTimeout() {\r\n    clearTimeout(this.timeoutTimer)\r\n    this.timeoutTimer = undefined\r\n  }\r\n\r\n  private _matchReceive({\r\n    status,\r\n    response,\r\n  }: {\r\n    status: string\r\n    response: Function\r\n  }) {\r\n    this.recHooks\r\n      .filter((h) => h.status === status)\r\n      .forEach((h) => h.callback(response))\r\n  }\r\n\r\n  private _hasReceived(status: string) {\r\n    return this.receivedResp && this.receivedResp.status === status\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}