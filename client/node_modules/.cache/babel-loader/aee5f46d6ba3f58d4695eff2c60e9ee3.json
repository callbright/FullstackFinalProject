{"ast":null,"code":"/* eslint-disable no-unused-vars */\n\n/**\r\n * The localize function argument callback which allows to convert raw value to\r\n * the actual type.\r\n *\r\n * @param value - The value to convert\r\n *\r\n * @returns The converted value\r\n */\n\n/**\r\n * The map of localized values for each width.\r\n */\n\n/**\r\n * The index type of the locale unit value. It types conversion of units of\r\n * values that don't start at 0 (i.e. quarters).\r\n */\n\n/**\r\n * Converts the unit value to the tuple of values.\r\n */\n\n/**\r\n * The tuple of localized era values. The first element represents BC,\r\n * the second element represents AD.\r\n */\n\n/**\r\n * The tuple of localized quarter values. The first element represents Q1.\r\n */\n\n/**\r\n * The tuple of localized day values. The first element represents Sunday.\r\n */\n\n/**\r\n * The tuple of localized month values. The first element represents January.\r\n */\nexport function buildLocalizeFn(args) {\n  return function (value, options) {\n    var context = options !== null && options !== void 0 && options.context ? String(options.context) : \"standalone\";\n    var valuesArray;\n\n    if (context === \"formatting\" && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(value) : value; // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","map":{"version":3,"names":["buildLocalizeFn","args","value","options","context","String","valuesArray","formattingValues","defaultWidth","defaultFormattingWidth","width","values","index","argumentCallback"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n\r\n/**\r\n * The localize function argument callback which allows to convert raw value to\r\n * the actual type.\r\n *\r\n * @param value - The value to convert\r\n *\r\n * @returns The converted value\r\n */\r\n\r\n/**\r\n * The map of localized values for each width.\r\n */\r\n\r\n/**\r\n * The index type of the locale unit value. It types conversion of units of\r\n * values that don't start at 0 (i.e. quarters).\r\n */\r\n\r\n/**\r\n * Converts the unit value to the tuple of values.\r\n */\r\n\r\n/**\r\n * The tuple of localized era values. The first element represents BC,\r\n * the second element represents AD.\r\n */\r\n\r\n/**\r\n * The tuple of localized quarter values. The first element represents Q1.\r\n */\r\n\r\n/**\r\n * The tuple of localized day values. The first element represents Sunday.\r\n */\r\n\r\n/**\r\n * The tuple of localized month values. The first element represents January.\r\n */\r\n\r\nexport function buildLocalizeFn(args) {\r\n  return (value, options) => {\r\n    const context = options?.context ? String(options.context) : \"standalone\";\r\n\r\n    let valuesArray;\r\n    if (context === \"formatting\" && args.formattingValues) {\r\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\r\n      const width = options?.width ? String(options.width) : defaultWidth;\r\n\r\n      valuesArray =\r\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\r\n    } else {\r\n      const defaultWidth = args.defaultWidth;\r\n      const width = options?.width ? String(options.width) : args.defaultWidth;\r\n\r\n      valuesArray = args.values[width] || args.values[defaultWidth];\r\n    }\r\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\r\n\r\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\r\n    return valuesArray[index];\r\n  };\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAO,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;EACpC,OAAO,UAACC,KAAD,EAAQC,OAAR,EAAoB;IACzB,IAAMC,OAAO,GAAGD,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEC,OAAT,GAAmBC,MAAM,CAACF,OAAO,CAACC,OAAT,CAAzB,GAA6C,YAA7D;IAEA,IAAIE,WAAJ;;IACA,IAAIF,OAAO,KAAK,YAAZ,IAA4BH,IAAI,CAACM,gBAArC,EAAuD;MACrD,IAAMC,YAAY,GAAGP,IAAI,CAACQ,sBAAL,IAA+BR,IAAI,CAACO,YAAzD;MACA,IAAME,KAAK,GAAGP,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEO,KAAT,GAAiBL,MAAM,CAACF,OAAO,CAACO,KAAT,CAAvB,GAAyCF,YAAvD;MAEAF,WAAW,GACTL,IAAI,CAACM,gBAAL,CAAsBG,KAAtB,KAAgCT,IAAI,CAACM,gBAAL,CAAsBC,YAAtB,CADlC;IAED,CAND,MAMO;MACL,IAAMA,aAAY,GAAGP,IAAI,CAACO,YAA1B;;MACA,IAAME,MAAK,GAAGP,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEO,KAAT,GAAiBL,MAAM,CAACF,OAAO,CAACO,KAAT,CAAvB,GAAyCT,IAAI,CAACO,YAA5D;;MAEAF,WAAW,GAAGL,IAAI,CAACU,MAAL,CAAYD,MAAZ,KAAsBT,IAAI,CAACU,MAAL,CAAYH,aAAZ,CAApC;IACD;;IACD,IAAMI,KAAK,GAAGX,IAAI,CAACY,gBAAL,GAAwBZ,IAAI,CAACY,gBAAL,CAAsBX,KAAtB,CAAxB,GAAuDA,KAArE,CAhByB,CAkBzB;;IACA,OAAOI,WAAW,CAACM,KAAD,CAAlB;EACD,CApBD;AAqBD"},"metadata":{},"sourceType":"module"}