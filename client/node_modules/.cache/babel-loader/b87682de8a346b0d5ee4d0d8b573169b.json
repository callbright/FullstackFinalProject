{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The latest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\n\nexport function max(dates) {\n  var result;\n  dates.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n} // Fallback for modularized imports:\n\nexport default max;","map":{"version":3,"names":["toDate","max","dates","result","forEach","dirtyDate","currentDate","undefined","isNaN","Number","Date","NaN"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/max.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The latest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\r\nexport function max(dates) {\r\n  let result;\r\n  dates.forEach(function (dirtyDate) {\r\n    const currentDate = toDate(dirtyDate);\r\n\r\n    if (\r\n      result === undefined ||\r\n      result < currentDate ||\r\n      isNaN(Number(currentDate))\r\n    ) {\r\n      result = currentDate;\r\n    }\r\n  });\r\n\r\n  return result || new Date(NaN);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default max;\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAoB;EACzB,IAAIC,MAAJ;EACAD,KAAK,CAACE,OAAN,CAAc,UAAUC,SAAV,EAAqB;IACjC,IAAMC,WAAW,GAAGN,MAAM,CAACK,SAAD,CAA1B;;IAEA,IACEF,MAAM,KAAKI,SAAX,IACAJ,MAAM,GAAGG,WADT,IAEAE,KAAK,CAACC,MAAM,CAACH,WAAD,CAAP,CAHP,EAIE;MACAH,MAAM,GAAGG,WAAT;IACD;EACF,CAVD;EAYA,OAAOH,MAAM,IAAI,IAAIO,IAAJ,CAASC,GAAT,CAAjB;AACD,C,CAED;;AACA,eAAeV,GAAf"},"metadata":{},"sourceType":"module"}