{"ast":null,"code":"import { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\n\nconst noop = () => {};\n\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nexport default class RealtimeClient {\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket.\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers The optional headers to pass when connecting.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   */\n  constructor(endPoint, options) {\n    var _a;\n\n    this.accessToken = null;\n    this.apiKey = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    /**\r\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n     *\r\n     * @internal\r\n     */\n\n    this._resolveFetch = customFetch => {\n      let _fetch;\n\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        _fetch = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return import('@supabase/node-fetch').then(_ref => {\n            let {\n              default: fetch\n            } = _ref;\n            return fetch(...args);\n          });\n        };\n      } else {\n        _fetch = fetch;\n      }\n\n      return function () {\n        return _fetch(...arguments);\n      };\n    };\n\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n\n    if (options === null || options === void 0 ? void 0 : options.transport) {\n      this.transport = options.transport;\n    } else {\n      this.transport = null;\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n\n    if (accessToken) {\n      this.accessToken = accessToken;\n      this.apiKey = accessToken;\n    }\n\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect();\n      this.connect();\n    }, this.reconnectAfterMs);\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\n\n\n  connect() {\n    if (this.conn) {\n      return;\n    }\n\n    if (this.transport) {\n      this.conn = new this.transport(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      return;\n    }\n\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(this._endPointURL());\n      this.setupConnection();\n      return;\n    }\n\n    this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\n      close: () => {\n        this.conn = null;\n      }\n    });\n    import('ws').then(_ref2 => {\n      let {\n        default: WS\n      } = _ref2;\n      this.conn = new WS(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      this.setupConnection();\n    });\n  }\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\n\n\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n\n\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n\n      this.conn = null; // remove open handles\n\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n  /**\r\n   * Returns all created channels\r\n   */\n\n\n  getChannels() {\n    return this.channels;\n  }\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\n\n\n  async removeChannel(channel) {\n    const status = await channel.unsubscribe();\n\n    if (this.channels.length === 0) {\n      this.disconnect();\n    }\n\n    return status;\n  }\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\n\n\n  async removeAllChannels() {\n    const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n    this.disconnect();\n    return values_1;\n  }\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\n\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\r\n   * Returns the current state of the socket.\r\n   */\n\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\n\n\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n\n  channel(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\n\n\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * @param token A JWT string.\r\n   */\n\n\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\n\n\n  _makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\n\n\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\n\n\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\r\n   * Sets up connection handlers.\r\n   *\r\n   * @internal\r\n   */\n\n\n  setupConnection() {\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n\n      this.conn.onopen = () => this._onConnOpen();\n\n      this.conn.onerror = error => this._onConnError(error);\n\n      this.conn.onmessage = event => this._onConnMessage(event);\n\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\r\n   * Returns the URL of the websocket.\r\n   *\r\n   * @internal\r\n   */\n\n\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n\n\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n\n\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n\n    this._flushSendBuffer();\n\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n\n\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n\n    this._triggerChanError();\n\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n\n\n  _onConnError(error) {\n    this.log('transport', error.message);\n\n    this._triggerChanError();\n\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n\n\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n\n\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n\n\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n\n\n  _sendHeartbeat() {\n    var _a;\n\n    if (!this.isConnected()) {\n      return;\n    }\n\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n\n}\n\nclass WSWebSocketDummy {\n  constructor(address, _protocols, options) {\n    this.binaryType = 'arraybuffer';\n\n    this.onclose = () => {};\n\n    this.onerror = () => {};\n\n    this.onmessage = () => {};\n\n    this.onopen = () => {};\n\n    this.readyState = SOCKET_STATES.connecting;\n\n    this.send = () => {};\n\n    this.url = null;\n    this.url = address;\n    this.close = options.close;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","RealtimeClient","constructor","endPoint","options","undefined","open","close","error","message","customFetch","_fetch","fetch","args","then","default","websocket","transport","params","headers","Object","timeout","logger","heartbeatIntervalMs","accessToken","_a","apikey","apiKey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","disconnect","connect","_resolveFetch","conn","_endPointURL","setupConnection","WSWebSocketDummy","WS","code","reason","onclose","heartbeatTimer","clearInterval","reset","getChannels","channels","removeChannel","channel","status","unsubscribe","length","removeAllChannels","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","event","ref","result","send","sendBuffer","setAuth","token","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","_onConnClose","_appendParams","assign","vsn","rawMessage","pendingHeartbeatRef","type","_isMember","_trigger","stateChangeCallbacks","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","address","_protocols"],"sources":["C:\\Users\\Lions\\final-project-callbright-1\\client\\node_modules\\@supabase\\realtime-js\\src\\RealtimeClient.ts"],"sourcesContent":["import {\r\n  VSN,\r\n  CHANNEL_EVENTS,\r\n  TRANSPORTS,\r\n  SOCKET_STATES,\r\n  DEFAULT_TIMEOUT,\r\n  WS_CLOSE_NORMAL,\r\n  DEFAULT_HEADERS,\r\n  CONNECTION_STATE,\r\n} from './lib/constants'\r\nimport Timer from './lib/timer'\r\nimport Serializer from './lib/serializer'\r\nimport RealtimeChannel from './RealtimeChannel'\r\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\r\n\r\nimport type { WebSocket as WSWebSocket } from 'ws'\r\n\r\ntype Fetch = typeof fetch\r\n\r\nexport type RealtimeClientOptions = {\r\n  transport?: WebSocketLikeConstructor\r\n  timeout?: number\r\n  heartbeatIntervalMs?: number\r\n  logger?: Function\r\n  encode?: Function\r\n  decode?: Function\r\n  reconnectAfterMs?: Function\r\n  headers?: { [key: string]: string }\r\n  params?: { [key: string]: any }\r\n  log_level?: 'info' | 'debug' | 'warn' | 'error'\r\n  fetch?: Fetch\r\n}\r\n\r\nexport type RealtimeMessage = {\r\n  topic: string\r\n  event: string\r\n  payload: any\r\n  ref: string\r\n  join_ref?: string\r\n}\r\n\r\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\r\n\r\nconst noop = () => {}\r\n\r\ninterface WebSocketLikeConstructor {\r\n  new (\r\n    address: string | URL,\r\n    _ignored?: any,\r\n    options?: { headers: Object | undefined }\r\n  ): WebSocketLike\r\n}\r\n\r\ntype WebSocketLike = WebSocket | WSWebSocket | WSWebSocketDummy\r\n\r\ninterface WebSocketLikeError {\r\n  error: any\r\n  message: string\r\n  type: string\r\n}\r\n\r\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined'\r\n\r\nexport default class RealtimeClient {\r\n  accessToken: string | null = null\r\n  apiKey: string | null = null\r\n  channels: RealtimeChannel[] = []\r\n  endPoint: string = ''\r\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\r\n  params?: { [key: string]: string } = {}\r\n  timeout: number = DEFAULT_TIMEOUT\r\n  transport: WebSocketLikeConstructor | null\r\n  heartbeatIntervalMs: number = 30000\r\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\r\n  pendingHeartbeatRef: string | null = null\r\n  ref: number = 0\r\n  reconnectTimer: Timer\r\n  logger: Function = noop\r\n  encode: Function\r\n  decode: Function\r\n  reconnectAfterMs: Function\r\n  conn: WebSocketLike | null = null\r\n  sendBuffer: Function[] = []\r\n  serializer: Serializer = new Serializer()\r\n  stateChangeCallbacks: {\r\n    open: Function[]\r\n    close: Function[]\r\n    error: Function[]\r\n    message: Function[]\r\n  } = {\r\n    open: [],\r\n    close: [],\r\n    error: [],\r\n    message: [],\r\n  }\r\n  fetch: Fetch\r\n\r\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket.\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers The optional headers to pass when connecting.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   */\r\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\r\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\r\n\r\n    if (options?.transport) {\r\n      this.transport = options.transport\r\n    } else {\r\n      this.transport = null\r\n    }\r\n    if (options?.params) this.params = options.params\r\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\r\n    if (options?.timeout) this.timeout = options.timeout\r\n    if (options?.logger) this.logger = options.logger\r\n    if (options?.heartbeatIntervalMs)\r\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\r\n\r\n    const accessToken = options?.params?.apikey\r\n    if (accessToken) {\r\n      this.accessToken = accessToken\r\n      this.apiKey = accessToken\r\n    }\r\n\r\n    this.reconnectAfterMs = options?.reconnectAfterMs\r\n      ? options.reconnectAfterMs\r\n      : (tries: number) => {\r\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\r\n        }\r\n    this.encode = options?.encode\r\n      ? options.encode\r\n      : (payload: JSON, callback: Function) => {\r\n          return callback(JSON.stringify(payload))\r\n        }\r\n    this.decode = options?.decode\r\n      ? options.decode\r\n      : this.serializer.decode.bind(this.serializer)\r\n    this.reconnectTimer = new Timer(async () => {\r\n      this.disconnect()\r\n      this.connect()\r\n    }, this.reconnectAfterMs)\r\n\r\n    this.fetch = this._resolveFetch(options?.fetch)\r\n  }\r\n\r\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\r\n  connect(): void {\r\n    if (this.conn) {\r\n      return\r\n    }\r\n\r\n    if (this.transport) {\r\n      this.conn = new this.transport(this._endPointURL(), undefined, {\r\n        headers: this.headers,\r\n      })\r\n      return\r\n    }\r\n\r\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\r\n      this.conn = new WebSocket(this._endPointURL())\r\n      this.setupConnection()\r\n      return\r\n    }\r\n\r\n    this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\r\n      close: () => {\r\n        this.conn = null\r\n      },\r\n    })\r\n\r\n    import('ws').then(({ default: WS }) => {\r\n      this.conn = new WS(this._endPointURL(), undefined, {\r\n        headers: this.headers,\r\n      })\r\n      this.setupConnection()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\r\n  disconnect(code?: number, reason?: string): void {\r\n    if (this.conn) {\r\n      this.conn.onclose = function () {} // noop\r\n      if (code) {\r\n        this.conn.close(code, reason ?? '')\r\n      } else {\r\n        this.conn.close()\r\n      }\r\n      this.conn = null\r\n      // remove open handles\r\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n      this.reconnectTimer.reset()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all created channels\r\n   */\r\n  getChannels(): RealtimeChannel[] {\r\n    return this.channels\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\r\n  async removeChannel(\r\n    channel: RealtimeChannel\r\n  ): Promise<RealtimeRemoveChannelResponse> {\r\n    const status = await channel.unsubscribe()\r\n    if (this.channels.length === 0) {\r\n      this.disconnect()\r\n    }\r\n    return status\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\r\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\r\n    const values_1 = await Promise.all(\r\n      this.channels.map((channel) => channel.unsubscribe())\r\n    )\r\n    this.disconnect()\r\n    return values_1\r\n  }\r\n\r\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\r\n  log(kind: string, msg: string, data?: any) {\r\n    this.logger(kind, msg, data)\r\n  }\r\n\r\n  /**\r\n   * Returns the current state of the socket.\r\n   */\r\n  connectionState(): CONNECTION_STATE {\r\n    switch (this.conn && this.conn.readyState) {\r\n      case SOCKET_STATES.connecting:\r\n        return CONNECTION_STATE.Connecting\r\n      case SOCKET_STATES.open:\r\n        return CONNECTION_STATE.Open\r\n      case SOCKET_STATES.closing:\r\n        return CONNECTION_STATE.Closing\r\n      default:\r\n        return CONNECTION_STATE.Closed\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\r\n  isConnected(): boolean {\r\n    return this.connectionState() === CONNECTION_STATE.Open\r\n  }\r\n\r\n  channel(\r\n    topic: string,\r\n    params: RealtimeChannelOptions = { config: {} }\r\n  ): RealtimeChannel {\r\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\r\n    this.channels.push(chan)\r\n    return chan\r\n  }\r\n\r\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\r\n  push(data: RealtimeMessage): void {\r\n    const { topic, event, payload, ref } = data\r\n    const callback = () => {\r\n      this.encode(data, (result: any) => {\r\n        this.conn?.send(result)\r\n      })\r\n    }\r\n    this.log('push', `${topic} ${event} (${ref})`, payload)\r\n    if (this.isConnected()) {\r\n      callback()\r\n    } else {\r\n      this.sendBuffer.push(callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * @param token A JWT string.\r\n   */\r\n  setAuth(token: string | null): void {\r\n    this.accessToken = token\r\n\r\n    this.channels.forEach((channel) => {\r\n      token && channel.updateJoinPayload({ access_token: token })\r\n\r\n      if (channel.joinedOnce && channel._isJoined()) {\r\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n   *\r\n   * @internal\r\n   */\r\n  _resolveFetch = (customFetch?: Fetch): Fetch => {\r\n    let _fetch: Fetch\r\n    if (customFetch) {\r\n      _fetch = customFetch\r\n    } else if (typeof fetch === 'undefined') {\r\n      _fetch = (...args) =>\r\n        import('@supabase/node-fetch' as any).then(({ default: fetch }) =>\r\n          fetch(...args)\r\n        )\r\n    } else {\r\n      _fetch = fetch\r\n    }\r\n    return (...args) => _fetch(...args)\r\n  }\r\n\r\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\r\n  _makeRef(): string {\r\n    let newRef = this.ref + 1\r\n    if (newRef === this.ref) {\r\n      this.ref = 0\r\n    } else {\r\n      this.ref = newRef\r\n    }\r\n\r\n    return this.ref.toString()\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\r\n  _leaveOpenTopic(topic: string): void {\r\n    let dupChannel = this.channels.find(\r\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\r\n    )\r\n    if (dupChannel) {\r\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\r\n      dupChannel.unsubscribe()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\r\n  _remove(channel: RealtimeChannel) {\r\n    this.channels = this.channels.filter(\r\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Sets up connection handlers.\r\n   *\r\n   * @internal\r\n   */\r\n  private setupConnection(): void {\r\n    if (this.conn) {\r\n      this.conn.binaryType = 'arraybuffer'\r\n      this.conn.onopen = () => this._onConnOpen()\r\n      this.conn.onerror = (error: WebSocketLikeError) =>\r\n        this._onConnError(error as WebSocketLikeError)\r\n      this.conn.onmessage = (event: any) => this._onConnMessage(event)\r\n      this.conn.onclose = (event: any) => this._onConnClose(event)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the URL of the websocket.\r\n   *\r\n   * @internal\r\n   */\r\n  private _endPointURL(): string {\r\n    return this._appendParams(\r\n      this.endPoint,\r\n      Object.assign({}, this.params, { vsn: VSN })\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnMessage(rawMessage: { data: any }) {\r\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\r\n      let { topic, event, payload, ref } = msg\r\n\r\n      if (\r\n        (ref && ref === this.pendingHeartbeatRef) ||\r\n        event === payload?.type\r\n      ) {\r\n        this.pendingHeartbeatRef = null\r\n      }\r\n\r\n      this.log(\r\n        'receive',\r\n        `${payload.status || ''} ${topic} ${event} ${\r\n          (ref && '(' + ref + ')') || ''\r\n        }`,\r\n        payload\r\n      )\r\n      this.channels\r\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\r\n        .forEach((channel: RealtimeChannel) =>\r\n          channel._trigger(event, payload, ref)\r\n        )\r\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\r\n    })\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnOpen() {\r\n    this.log('transport', `connected to ${this._endPointURL()}`)\r\n    this._flushSendBuffer()\r\n    this.reconnectTimer.reset()\r\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n    this.heartbeatTimer = setInterval(\r\n      () => this._sendHeartbeat(),\r\n      this.heartbeatIntervalMs\r\n    )\r\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnClose(event: any) {\r\n    this.log('transport', 'close', event)\r\n    this._triggerChanError()\r\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n    this.reconnectTimer.scheduleTimeout()\r\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnError(error: WebSocketLikeError) {\r\n    this.log('transport', error.message)\r\n    this._triggerChanError()\r\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChanError() {\r\n    this.channels.forEach((channel: RealtimeChannel) =>\r\n      channel._trigger(CHANNEL_EVENTS.error)\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _appendParams(\r\n    url: string,\r\n    params: { [key: string]: string }\r\n  ): string {\r\n    if (Object.keys(params).length === 0) {\r\n      return url\r\n    }\r\n    const prefix = url.match(/\\?/) ? '&' : '?'\r\n    const query = new URLSearchParams(params)\r\n\r\n    return `${url}${prefix}${query}`\r\n  }\r\n\r\n  /** @internal */\r\n  private _flushSendBuffer() {\r\n    if (this.isConnected() && this.sendBuffer.length > 0) {\r\n      this.sendBuffer.forEach((callback) => callback())\r\n      this.sendBuffer = []\r\n    }\r\n  }\r\n  /** @internal */\r\n  private _sendHeartbeat() {\r\n    if (!this.isConnected()) {\r\n      return\r\n    }\r\n    if (this.pendingHeartbeatRef) {\r\n      this.pendingHeartbeatRef = null\r\n      this.log(\r\n        'transport',\r\n        'heartbeat timeout. Attempting to re-establish connection'\r\n      )\r\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\r\n      return\r\n    }\r\n    this.pendingHeartbeatRef = this._makeRef()\r\n    this.push({\r\n      topic: 'phoenix',\r\n      event: 'heartbeat',\r\n      payload: {},\r\n      ref: this.pendingHeartbeatRef,\r\n    })\r\n    this.setAuth(this.accessToken)\r\n  }\r\n}\r\n\r\nclass WSWebSocketDummy {\r\n  binaryType: string = 'arraybuffer'\r\n  close: Function\r\n  onclose: Function = () => {}\r\n  onerror: Function = () => {}\r\n  onmessage: Function = () => {}\r\n  onopen: Function = () => {}\r\n  readyState: number = SOCKET_STATES.connecting\r\n  send: Function = () => {}\r\n  url: string | URL | null = null\r\n\r\n  constructor(\r\n    address: string,\r\n    _protocols: undefined,\r\n    options: { close: Function }\r\n  ) {\r\n    this.url = address\r\n    this.close = options.close\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}