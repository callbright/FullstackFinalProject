{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport { supportsLocalStorage } from './helpers';\n/**\r\n * @experimental\r\n */\n\nexport var internals = {\n  /**\r\n   * @experimental\r\n   */\n  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true')\n};\n/**\r\n * An error thrown when a lock cannot be acquired after some amount of time.\r\n *\r\n * Use the {@link #isAcquireTimeout} property instead of checking with `instanceof`.\r\n */\n\nexport var LockAcquireTimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(LockAcquireTimeoutError, _Error);\n\n  var _super = _createSuper(LockAcquireTimeoutError);\n\n  function LockAcquireTimeoutError(message) {\n    var _this;\n\n    _classCallCheck(this, LockAcquireTimeoutError);\n\n    _this = _super.call(this, message);\n    _this.isAcquireTimeout = true;\n    return _this;\n  }\n\n  return _createClass(LockAcquireTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexport var NavigatorLockAcquireTimeoutError = /*#__PURE__*/function (_LockAcquireTimeoutEr) {\n  _inherits(NavigatorLockAcquireTimeoutError, _LockAcquireTimeoutEr);\n\n  var _super2 = _createSuper(NavigatorLockAcquireTimeoutError);\n\n  function NavigatorLockAcquireTimeoutError() {\n    _classCallCheck(this, NavigatorLockAcquireTimeoutError);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(NavigatorLockAcquireTimeoutError);\n}(LockAcquireTimeoutError);\n/**\r\n * Implements a global exclusive lock using the Navigator LockManager API. It\r\n * is available on all browsers released after 2022-03-15 with Safari being the\r\n * last one to release support. If the API is not available, this function will\r\n * throw. Make sure you check availablility before configuring {@link\r\n * GoTrueClient}.\r\n *\r\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\r\n * local storage item to `true`.\r\n *\r\n * Internals:\r\n *\r\n * Since the LockManager API does not preserve stack traces for the async\r\n * function passed in the `request` method, a trick is used where acquiring the\r\n * lock releases a previously started promise to run the operation in the `fn`\r\n * function. The lock waits for that promise to finish (with or without error),\r\n * while the function will finally wait for the result anyway.\r\n *\r\n * @param name Name of the lock to be acquired.\r\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\r\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\r\n *                       will time out after so many milliseconds. An error is\r\n *                       a timeout if it has `isAcquireTimeout` set to true.\r\n * @param fn The operation to run once the lock is acquired.\r\n */\n\nexport function navigatorLock(_x, _x2, _x3) {\n  return _navigatorLock.apply(this, arguments);\n}\n\nfunction _navigatorLock() {\n  _navigatorLock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name, acquireTimeout, fn) {\n    var abortController;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (internals.debug) {\n              console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n            }\n\n            abortController = new globalThis.AbortController();\n\n            if (acquireTimeout > 0) {\n              setTimeout(function () {\n                abortController.abort();\n\n                if (internals.debug) {\n                  console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n                }\n              }, acquireTimeout);\n            } // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n\n\n            _context2.next = 5;\n            return globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {\n              mode: 'exclusive',\n              ifAvailable: true\n            } : {\n              mode: 'exclusive',\n              signal: abortController.signal\n            }, /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(lock) {\n                var result;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!lock) {\n                          _context.next = 11;\n                          break;\n                        }\n\n                        if (internals.debug) {\n                          console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name);\n                        }\n\n                        _context.prev = 2;\n                        _context.next = 5;\n                        return fn();\n\n                      case 5:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 6:\n                        _context.prev = 6;\n\n                        if (internals.debug) {\n                          console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name);\n                        }\n\n                        return _context.finish(6);\n\n                      case 9:\n                        _context.next = 31;\n                        break;\n\n                      case 11:\n                        if (!(acquireTimeout === 0)) {\n                          _context.next = 16;\n                          break;\n                        }\n\n                        if (internals.debug) {\n                          console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\n                        }\n\n                        throw new NavigatorLockAcquireTimeoutError(\"Acquiring an exclusive Navigator LockManager lock \\\"\".concat(name, \"\\\" immediately failed\"));\n\n                      case 16:\n                        if (!internals.debug) {\n                          _context.next = 27;\n                          break;\n                        }\n\n                        _context.prev = 17;\n                        _context.next = 20;\n                        return globalThis.navigator.locks.query();\n\n                      case 20:\n                        result = _context.sent;\n                        console.log('@supabase/gotrue-js: Navigator LockManager state', JSON.stringify(result, null, '  '));\n                        _context.next = 27;\n                        break;\n\n                      case 24:\n                        _context.prev = 24;\n                        _context.t0 = _context[\"catch\"](17);\n                        console.warn('@supabase/gotrue-js: Error when querying Navigator LockManager state', _context.t0);\n\n                      case 27:\n                        // Browser is not following the Navigator LockManager spec, it\n                        // returned a null lock when we didn't use ifAvailable. So we can\n                        // pretend the lock is acquired in the name of backward compatibility\n                        // and user experience and just run the function.\n                        console.warn('@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request');\n                        _context.next = 30;\n                        return fn();\n\n                      case 30:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 31:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[2,, 6, 9], [17, 24]]);\n              }));\n\n              return function (_x4) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _navigatorLock.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["supportsLocalStorage","internals","debug","globalThis","localStorage","getItem","LockAcquireTimeoutError","message","Error","NavigatorLockAcquireTimeoutError","navigatorLock","name","acquireTimeout","fn","console","log","abortController","AbortController","setTimeout","abort","navigator","locks","request","mode","ifAvailable","signal","lock","query","result","JSON","stringify","warn"],"sources":["C:\\Users\\Lions\\FullstackFinalProject\\client\\node_modules\\@supabase\\auth-js\\src\\lib\\locks.ts"],"sourcesContent":["import { supportsLocalStorage } from './helpers'\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport const internals = {\r\n  /**\r\n   * @experimental\r\n   */\r\n  debug: !!(\r\n    globalThis &&\r\n    supportsLocalStorage() &&\r\n    globalThis.localStorage &&\r\n    globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'\r\n  ),\r\n}\r\n\r\n/**\r\n * An error thrown when a lock cannot be acquired after some amount of time.\r\n *\r\n * Use the {@link #isAcquireTimeout} property instead of checking with `instanceof`.\r\n */\r\nexport abstract class LockAcquireTimeoutError extends Error {\r\n  public readonly isAcquireTimeout = true\r\n\r\n  constructor(message: string) {\r\n    super(message)\r\n  }\r\n}\r\n\r\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {}\r\n\r\n/**\r\n * Implements a global exclusive lock using the Navigator LockManager API. It\r\n * is available on all browsers released after 2022-03-15 with Safari being the\r\n * last one to release support. If the API is not available, this function will\r\n * throw. Make sure you check availablility before configuring {@link\r\n * GoTrueClient}.\r\n *\r\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\r\n * local storage item to `true`.\r\n *\r\n * Internals:\r\n *\r\n * Since the LockManager API does not preserve stack traces for the async\r\n * function passed in the `request` method, a trick is used where acquiring the\r\n * lock releases a previously started promise to run the operation in the `fn`\r\n * function. The lock waits for that promise to finish (with or without error),\r\n * while the function will finally wait for the result anyway.\r\n *\r\n * @param name Name of the lock to be acquired.\r\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\r\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\r\n *                       will time out after so many milliseconds. An error is\r\n *                       a timeout if it has `isAcquireTimeout` set to true.\r\n * @param fn The operation to run once the lock is acquired.\r\n */\r\nexport async function navigatorLock<R>(\r\n  name: string,\r\n  acquireTimeout: number,\r\n  fn: () => Promise<R>\r\n): Promise<R> {\r\n  if (internals.debug) {\r\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout)\r\n  }\r\n\r\n  const abortController = new globalThis.AbortController()\r\n\r\n  if (acquireTimeout > 0) {\r\n    setTimeout(() => {\r\n      abortController.abort()\r\n      if (internals.debug) {\r\n        console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name)\r\n      }\r\n    }, acquireTimeout)\r\n  }\r\n\r\n  // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\r\n\r\n  return await globalThis.navigator.locks.request(\r\n    name,\r\n    acquireTimeout === 0\r\n      ? {\r\n          mode: 'exclusive',\r\n          ifAvailable: true,\r\n        }\r\n      : {\r\n          mode: 'exclusive',\r\n          signal: abortController.signal,\r\n        },\r\n    async (lock) => {\r\n      if (lock) {\r\n        if (internals.debug) {\r\n          console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name)\r\n        }\r\n\r\n        try {\r\n          return await fn()\r\n        } finally {\r\n          if (internals.debug) {\r\n            console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name)\r\n          }\r\n        }\r\n      } else {\r\n        if (acquireTimeout === 0) {\r\n          if (internals.debug) {\r\n            console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name)\r\n          }\r\n\r\n          throw new NavigatorLockAcquireTimeoutError(\r\n            `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\r\n          )\r\n        } else {\r\n          if (internals.debug) {\r\n            try {\r\n              const result = await globalThis.navigator.locks.query()\r\n\r\n              console.log(\r\n                '@supabase/gotrue-js: Navigator LockManager state',\r\n                JSON.stringify(result, null, '  ')\r\n              )\r\n            } catch (e: any) {\r\n              console.warn(\r\n                '@supabase/gotrue-js: Error when querying Navigator LockManager state',\r\n                e\r\n              )\r\n            }\r\n          }\r\n\r\n          // Browser is not following the Navigator LockManager spec, it\r\n          // returned a null lock when we didn't use ifAvailable. So we can\r\n          // pretend the lock is acquired in the name of backward compatibility\r\n          // and user experience and just run the function.\r\n          console.warn(\r\n            '@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request'\r\n          )\r\n\r\n          return await fn()\r\n        }\r\n      }\r\n    }\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}