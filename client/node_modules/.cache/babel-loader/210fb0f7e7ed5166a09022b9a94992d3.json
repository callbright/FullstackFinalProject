{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to check\r\n * @param interval - The interval to check\r\n *\r\n * @returns The date is within the interval\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // For date equal to interval start:\r\n * isWithinInterval(date, { start, end: date })\r\n * // => true\r\n *\r\n * @example\r\n * // For date equal to interval end:\r\n * isWithinInterval(date, { start: date, end })\r\n * // => true\r\n */\n\nexport function isWithinInterval(date, interval) {\n  const time = +toDate(date);\n  const [startTime, endTime] = [+toDate(interval.start), +toDate(interval.end)].sort((a, b) => a - b);\n  return time >= startTime && time <= endTime;\n} // Fallback for modularized imports:\n\nexport default isWithinInterval;","map":{"version":3,"names":["toDate","isWithinInterval","date","interval","time","startTime","endTime","start","end","sort","a","b"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/isWithinInterval.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to check\r\n * @param interval - The interval to check\r\n *\r\n * @returns The date is within the interval\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // For date equal to interval start:\r\n * isWithinInterval(date, { start, end: date })\r\n * // => true\r\n *\r\n * @example\r\n * // For date equal to interval end:\r\n * isWithinInterval(date, { start: date, end })\r\n * // => true\r\n */\r\nexport function isWithinInterval(date, interval) {\r\n  const time = +toDate(date);\r\n  const [startTime, endTime] = [\r\n    +toDate(interval.start),\r\n    +toDate(interval.end),\r\n  ].sort((a, b) => a - b);\r\n\r\n  return time >= startTime && time <= endTime;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isWithinInterval;\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;EAC/C,MAAMC,IAAI,GAAG,CAACJ,MAAM,CAACE,IAAD,CAApB;EACA,MAAM,CAACG,SAAD,EAAYC,OAAZ,IAAuB,CAC3B,CAACN,MAAM,CAACG,QAAQ,CAACI,KAAV,CADoB,EAE3B,CAACP,MAAM,CAACG,QAAQ,CAACK,GAAV,CAFoB,EAG3BC,IAH2B,CAGtB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHQ,CAA7B;EAKA,OAAOP,IAAI,IAAIC,SAAR,IAAqBD,IAAI,IAAIE,OAApC;AACD,C,CAED;;AACA,eAAeL,gBAAf"},"metadata":{},"sourceType":"module"}