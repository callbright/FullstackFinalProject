{"ast":null,"code":"import _classCallCheck from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport PostgrestBuilder from './PostgrestBuilder';\n\nvar PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestTransformBuilder, _PostgrestBuilder);\n\n  var _super = _createSuper(PostgrestTransformBuilder);\n\n  function PostgrestTransformBuilder() {\n    _classCallCheck(this, PostgrestTransformBuilder);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PostgrestTransformBuilder, [{\n    key: \"select\",\n    value:\n    /**\r\n     * Perform a SELECT on the query result.\r\n     *\r\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n     * return modified rows. By calling this method, modified rows are returned in\r\n     * `data`.\r\n     *\r\n     * @param columns - The columns to retrieve, separated by commas\r\n     */\n    function select(columns) {\n      // Remove whitespaces except when quoted\n      var quoted = false;\n      var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n\n      if (this.headers['Prefer']) {\n        this.headers['Prefer'] += ',';\n      }\n\n      this.headers['Prefer'] += 'return=representation';\n      return this;\n    }\n    /**\r\n     * Order the query result by `column`.\r\n     *\r\n     * You can call this method multiple times to order by multiple columns.\r\n     *\r\n     * You can order referenced tables, but it only affects the ordering of the\r\n     * parent table if you use `!inner` in the query.\r\n     *\r\n     * @param column - The column to order by\r\n     * @param options - Named parameters\r\n     * @param options.ascending - If `true`, the result will be in ascending order\r\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n     * `null`s appear last.\r\n     * @param options.referencedTable - Set this to order a referenced table by\r\n     * its columns\r\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n     * instead\r\n     */\n\n  }, {\n    key: \"order\",\n    value: function order(column) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$ascending = _ref.ascending,\n          ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n          nullsFirst = _ref.nullsFirst,\n          foreignTable = _ref.foreignTable,\n          _ref$referencedTable = _ref.referencedTable,\n          referencedTable = _ref$referencedTable === void 0 ? foreignTable : _ref$referencedTable;\n\n      var key = referencedTable ? \"\".concat(referencedTable, \".order\") : 'order';\n      var existingOrder = this.url.searchParams.get(key);\n      this.url.searchParams.set(key, \"\".concat(existingOrder ? \"\".concat(existingOrder, \",\") : '').concat(column, \".\").concat(ascending ? 'asc' : 'desc').concat(nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'));\n      return this;\n    }\n    /**\r\n     * Limit the query result by `count`.\r\n     *\r\n     * @param count - The maximum number of rows to return\r\n     * @param options - Named parameters\r\n     * @param options.referencedTable - Set this to limit rows of referenced\r\n     * tables instead of the parent table\r\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n     * instead\r\n     */\n\n  }, {\n    key: \"limit\",\n    value: function limit(count) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref2.foreignTable,\n          _ref2$referencedTable = _ref2.referencedTable,\n          referencedTable = _ref2$referencedTable === void 0 ? foreignTable : _ref2$referencedTable;\n\n      var key = typeof referencedTable === 'undefined' ? 'limit' : \"\".concat(referencedTable, \".limit\");\n      this.url.searchParams.set(key, \"\".concat(count));\n      return this;\n    }\n    /**\r\n     * Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`).\r\n     * Only records within this range are returned.\r\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\r\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\r\n     * and fourth rows of the query.\r\n     *\r\n     * @param from - The starting index from which to limit the result\r\n     * @param to - The last index to which to limit the result\r\n     * @param options - Named parameters\r\n     * @param options.referencedTable - Set this to limit rows of referenced\r\n     * tables instead of the parent table\r\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n     * instead\r\n     */\n\n  }, {\n    key: \"range\",\n    value: function range(from, to) {\n      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          foreignTable = _ref3.foreignTable,\n          _ref3$referencedTable = _ref3.referencedTable,\n          referencedTable = _ref3$referencedTable === void 0 ? foreignTable : _ref3$referencedTable;\n\n      var keyOffset = typeof referencedTable === 'undefined' ? 'offset' : \"\".concat(referencedTable, \".offset\");\n      var keyLimit = typeof referencedTable === 'undefined' ? 'limit' : \"\".concat(referencedTable, \".limit\");\n      this.url.searchParams.set(keyOffset, \"\".concat(from)); // Range is inclusive, so add 1\n\n      this.url.searchParams.set(keyLimit, \"\".concat(to - from + 1));\n      return this;\n    }\n    /**\r\n     * Set the AbortSignal for the fetch request.\r\n     *\r\n     * @param signal - The AbortSignal to use for the fetch request\r\n     */\n\n  }, {\n    key: \"abortSignal\",\n    value: function abortSignal(signal) {\n      this.signal = signal;\n      return this;\n    }\n    /**\r\n     * Return `data` as a single object instead of an array of objects.\r\n     *\r\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n     * returns an error.\r\n     */\n\n  }, {\n    key: \"single\",\n    value: function single() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      return this;\n    }\n    /**\r\n     * Return `data` as a single object instead of an array of objects.\r\n     *\r\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n     * this returns an error.\r\n     */\n\n  }, {\n    key: \"maybeSingle\",\n    value: function maybeSingle() {\n      // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n      // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n      if (this.method === 'GET') {\n        this.headers['Accept'] = 'application/json';\n      } else {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      }\n\n      this.isMaybeSingle = true;\n      return this;\n    }\n    /**\r\n     * Return `data` as a string in CSV format.\r\n     */\n\n  }, {\n    key: \"csv\",\n    value: function csv() {\n      this.headers['Accept'] = 'text/csv';\n      return this;\n    }\n    /**\r\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n     */\n\n  }, {\n    key: \"geojson\",\n    value: function geojson() {\n      this.headers['Accept'] = 'application/geo+json';\n      return this;\n    }\n    /**\r\n     * Return `data` as the EXPLAIN plan for the query.\r\n     *\r\n     * You need to enable the\r\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\r\n     * setting before using this method.\r\n     *\r\n     * @param options - Named parameters\r\n     *\r\n     * @param options.analyze - If `true`, the query will be executed and the\r\n     * actual run time will be returned\r\n     *\r\n     * @param options.verbose - If `true`, the query identifier will be returned\r\n     * and `data` will include the output columns of the query\r\n     *\r\n     * @param options.settings - If `true`, include information on configuration\r\n     * parameters that affect query planning\r\n     *\r\n     * @param options.buffers - If `true`, include information on buffer usage\r\n     *\r\n     * @param options.wal - If `true`, include information on WAL record generation\r\n     *\r\n     * @param options.format - The format of the output, can be `\"text\"` (default)\r\n     * or `\"json\"`\r\n     */\n\n  }, {\n    key: \"explain\",\n    value: function explain() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$analyze = _ref4.analyze,\n          analyze = _ref4$analyze === void 0 ? false : _ref4$analyze,\n          _ref4$verbose = _ref4.verbose,\n          verbose = _ref4$verbose === void 0 ? false : _ref4$verbose,\n          _ref4$settings = _ref4.settings,\n          settings = _ref4$settings === void 0 ? false : _ref4$settings,\n          _ref4$buffers = _ref4.buffers,\n          buffers = _ref4$buffers === void 0 ? false : _ref4$buffers,\n          _ref4$wal = _ref4.wal,\n          wal = _ref4$wal === void 0 ? false : _ref4$wal,\n          _ref4$format = _ref4.format,\n          format = _ref4$format === void 0 ? 'text' : _ref4$format;\n\n      var _a;\n\n      var options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|'); // An Accept header can carry multiple media types but postgrest-js always sends one\n\n      var forMediatype = (_a = this.headers['Accept']) !== null && _a !== void 0 ? _a : 'application/json';\n      this.headers['Accept'] = \"application/vnd.pgrst.plan+\".concat(format, \"; for=\\\"\").concat(forMediatype, \"\\\"; options=\").concat(options, \";\");\n      if (format === 'json') return this;else return this;\n    }\n    /**\r\n     * Rollback the query.\r\n     *\r\n     * `data` will still be returned, but the query is not committed.\r\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      var _a;\n\n      if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n        this.headers['Prefer'] += ',tx=rollback';\n      } else {\n        this.headers['Prefer'] = 'tx=rollback';\n      }\n\n      return this;\n    }\n    /**\r\n     * Override the type of the returned `data`.\r\n     *\r\n     * @typeParam NewResult - The new result type to override with\r\n     */\n\n  }, {\n    key: \"returns\",\n    value: function returns() {\n      return this;\n    }\n  }]);\n\n  return PostgrestTransformBuilder;\n}(PostgrestBuilder);\n\nexport { PostgrestTransformBuilder as default };","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestTransformBuilder","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","column","ascending","nullsFirst","foreignTable","referencedTable","key","existingOrder","get","undefined","count","from","to","keyOffset","keyLimit","signal","method","isMaybeSingle","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","_a","trim","length"],"sources":["C:\\Users\\Lions\\FullstackFinalProject\\client\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\r\nimport { GetResult } from './select-query-parser'\r\nimport { GenericSchema } from './types'\r\n\r\nexport default class PostgrestTransformBuilder<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result,\r\n  RelationName = unknown,\r\n  Relationships = unknown\r\n> extends PostgrestBuilder<Result> {\r\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\r\n  select<\r\n    Query extends string = '*',\r\n    NewResultOne = GetResult<Schema, Row, RelationName, Relationships, Query>\r\n  >(\r\n    columns?: Query\r\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[], RelationName, Relationships> {\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    const cleanedColumns = (columns ?? '*')\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    this.url.searchParams.set('select', cleanedColumns)\r\n    if (this.headers['Prefer']) {\r\n      this.headers['Prefer'] += ','\r\n    }\r\n    this.headers['Prefer'] += 'return=representation'\r\n    return this as unknown as PostgrestTransformBuilder<\r\n      Schema,\r\n      Row,\r\n      NewResultOne[],\r\n      RelationName,\r\n      Relationships\r\n    >\r\n  }\r\n\r\n  order<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: undefined }\r\n  ): this\r\n  order(\r\n    column: string,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: string }\r\n  ): this\r\n  /**\r\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\r\n   */\r\n  order<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\r\n  ): this\r\n  /**\r\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\r\n   */\r\n  order(\r\n    column: string,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string }\r\n  ): this\r\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order referenced tables, but it only affects the ordering of the\r\n   * parent table if you use `!inner` in the query.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.referencedTable - Set this to order a referenced table by\r\n   * its columns\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\r\n  order(\r\n    column: string,\r\n    {\r\n      ascending = true,\r\n      nullsFirst,\r\n      foreignTable,\r\n      referencedTable = foreignTable,\r\n    }: {\r\n      ascending?: boolean\r\n      nullsFirst?: boolean\r\n      foreignTable?: string\r\n      referencedTable?: string\r\n    } = {}\r\n  ): this {\r\n    const key = referencedTable ? `${referencedTable}.order` : 'order'\r\n    const existingOrder = this.url.searchParams.get(key)\r\n\r\n    this.url.searchParams.set(\r\n      key,\r\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\r\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\r\n      }`\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to limit rows of referenced\r\n   * tables instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\r\n  limit(\r\n    count: number,\r\n    {\r\n      foreignTable,\r\n      referencedTable = foreignTable,\r\n    }: { foreignTable?: string; referencedTable?: string } = {}\r\n  ): this {\r\n    const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\r\n    this.url.searchParams.set(key, `${count}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`).\r\n   * Only records within this range are returned.\r\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\r\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\r\n   * and fourth rows of the query.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to limit rows of referenced\r\n   * tables instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\r\n  range(\r\n    from: number,\r\n    to: number,\r\n    {\r\n      foreignTable,\r\n      referencedTable = foreignTable,\r\n    }: { foreignTable?: string; referencedTable?: string } = {}\r\n  ): this {\r\n    const keyOffset =\r\n      typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`\r\n    const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\r\n    this.url.searchParams.set(keyOffset, `${from}`)\r\n    // Range is inclusive, so add 1\r\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\r\n  abortSignal(signal: AbortSignal): this {\r\n    this.signal = signal\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\r\n  single<\r\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\r\n  >(): PostgrestBuilder<ResultOne> {\r\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    return this as PostgrestBuilder<ResultOne>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\r\n  maybeSingle<\r\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\r\n  >(): PostgrestBuilder<ResultOne | null> {\r\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\r\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\r\n    if (this.method === 'GET') {\r\n      this.headers['Accept'] = 'application/json'\r\n    } else {\r\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    }\r\n    this.isMaybeSingle = true\r\n    return this as PostgrestBuilder<ResultOne | null>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\r\n  csv(): PostgrestBuilder<string> {\r\n    this.headers['Accept'] = 'text/csv'\r\n    return this as PostgrestBuilder<string>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\r\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\r\n    this.headers['Accept'] = 'application/geo+json'\r\n    return this as PostgrestBuilder<Record<string, unknown>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * You need to enable the\r\n   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\r\n   * setting before using this method.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\r\n  explain({\r\n    analyze = false,\r\n    verbose = false,\r\n    settings = false,\r\n    buffers = false,\r\n    wal = false,\r\n    format = 'text',\r\n  }: {\r\n    analyze?: boolean\r\n    verbose?: boolean\r\n    settings?: boolean\r\n    buffers?: boolean\r\n    wal?: boolean\r\n    format?: 'json' | 'text'\r\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\r\n    const options = [\r\n      analyze ? 'analyze' : null,\r\n      verbose ? 'verbose' : null,\r\n      settings ? 'settings' : null,\r\n      buffers ? 'buffers' : null,\r\n      wal ? 'wal' : null,\r\n    ]\r\n      .filter(Boolean)\r\n      .join('|')\r\n    // An Accept header can carry multiple media types but postgrest-js always sends one\r\n    const forMediatype = this.headers['Accept'] ?? 'application/json'\r\n    this.headers[\r\n      'Accept'\r\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\r\n    if (format === 'json') return this as PostgrestBuilder<Record<string, unknown>[]>\r\n    else return this as PostgrestBuilder<string>\r\n  }\r\n\r\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\r\n  rollback(): this {\r\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\r\n      this.headers['Prefer'] += ',tx=rollback'\r\n    } else {\r\n      this.headers['Prefer'] = 'tx=rollback'\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   */\r\n  returns<NewResult>(): PostgrestTransformBuilder<\r\n    Schema,\r\n    Row,\r\n    NewResult,\r\n    RelationName,\r\n    Relationships\r\n  > {\r\n    return this as unknown as PostgrestTransformBuilder<\r\n      Schema,\r\n      Row,\r\n      NewResult,\r\n      RelationName,\r\n      Relationships\r\n    >\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}