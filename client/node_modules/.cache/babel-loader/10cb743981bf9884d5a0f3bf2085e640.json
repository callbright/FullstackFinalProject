{"ast":null,"code":"import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full days according to the local timezone\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n * //=> 92\r\n */\n\nexport function differenceInDays(dateLeft, dateRight) {\n  var _dateLeft = toDate(dateLeft);\n\n  var _dateRight = toDate(dateRight);\n\n  var sign = compareLocalAsc(_dateLeft, _dateRight);\n  var difference = Math.abs(differenceInCalendarDays(_dateLeft, _dateRight));\n\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n\n  var isLastDayNotFull = Number(compareLocalAsc(_dateLeft, _dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n} // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n} // Fallback for modularized imports:\n\n\nexport default differenceInDays;","map":{"version":3,"names":["differenceInCalendarDays","toDate","differenceInDays","dateLeft","dateRight","_dateLeft","_dateRight","sign","compareLocalAsc","difference","Math","abs","setDate","getDate","isLastDayNotFull","Number","result","diff","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/differenceInDays.mjs"],"sourcesContent":["import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full days according to the local timezone\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n * //=> 92\r\n */\r\nexport function differenceInDays(dateLeft, dateRight) {\r\n  const _dateLeft = toDate(dateLeft);\r\n  const _dateRight = toDate(dateRight);\r\n\r\n  const sign = compareLocalAsc(_dateLeft, _dateRight);\r\n  const difference = Math.abs(differenceInCalendarDays(_dateLeft, _dateRight));\r\n\r\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);\r\n\r\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\r\n  // If so, result must be decreased by 1 in absolute value\r\n  const isLastDayNotFull = Number(\r\n    compareLocalAsc(_dateLeft, _dateRight) === -sign,\r\n  );\r\n  const result = sign * (difference - isLastDayNotFull);\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Like `compareAsc` but uses local time not UTC, which is needed\r\n// for accurate equality comparisons of UTC timestamps that end up\r\n// having the same representation in local time, e.g. one hour before\r\n// DST ends vs. the instant that DST ends.\r\nfunction compareLocalAsc(dateLeft, dateRight) {\r\n  const diff =\r\n    dateLeft.getFullYear() - dateRight.getFullYear() ||\r\n    dateLeft.getMonth() - dateRight.getMonth() ||\r\n    dateLeft.getDate() - dateRight.getDate() ||\r\n    dateLeft.getHours() - dateRight.getHours() ||\r\n    dateLeft.getMinutes() - dateRight.getMinutes() ||\r\n    dateLeft.getSeconds() - dateRight.getSeconds() ||\r\n    dateLeft.getMilliseconds() - dateRight.getMilliseconds();\r\n\r\n  if (diff < 0) {\r\n    return -1;\r\n  } else if (diff > 0) {\r\n    return 1;\r\n    // Return 0 if diff is 0; return NaN if diff is NaN\r\n  } else {\r\n    return diff;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInDays;\r\n"],"mappings":"AAAA,SAASA,wBAAT,QAAyC,gCAAzC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,SAApC,EAA+C;EACpD,IAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAD,CAAxB;;EACA,IAAMG,UAAU,GAAGL,MAAM,CAACG,SAAD,CAAzB;;EAEA,IAAMG,IAAI,GAAGC,eAAe,CAACH,SAAD,EAAYC,UAAZ,CAA5B;EACA,IAAMG,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASX,wBAAwB,CAACK,SAAD,EAAYC,UAAZ,CAAjC,CAAnB;;EAEAD,SAAS,CAACO,OAAV,CAAkBP,SAAS,CAACQ,OAAV,KAAsBN,IAAI,GAAGE,UAA/C,EAPoD,CASpD;EACA;;;EACA,IAAMK,gBAAgB,GAAGC,MAAM,CAC7BP,eAAe,CAACH,SAAD,EAAYC,UAAZ,CAAf,KAA2C,CAACC,IADf,CAA/B;EAGA,IAAMS,MAAM,GAAGT,IAAI,IAAIE,UAAU,GAAGK,gBAAjB,CAAnB,CAdoD,CAepD;;EACA,OAAOE,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD,C,CAED;AACA;AACA;AACA;;AACA,SAASR,eAAT,CAAyBL,QAAzB,EAAmCC,SAAnC,EAA8C;EAC5C,IAAMa,IAAI,GACRd,QAAQ,CAACe,WAAT,KAAyBd,SAAS,CAACc,WAAV,EAAzB,IACAf,QAAQ,CAACgB,QAAT,KAAsBf,SAAS,CAACe,QAAV,EADtB,IAEAhB,QAAQ,CAACU,OAAT,KAAqBT,SAAS,CAACS,OAAV,EAFrB,IAGAV,QAAQ,CAACiB,QAAT,KAAsBhB,SAAS,CAACgB,QAAV,EAHtB,IAIAjB,QAAQ,CAACkB,UAAT,KAAwBjB,SAAS,CAACiB,UAAV,EAJxB,IAKAlB,QAAQ,CAACmB,UAAT,KAAwBlB,SAAS,CAACkB,UAAV,EALxB,IAMAnB,QAAQ,CAACoB,eAAT,KAA6BnB,SAAS,CAACmB,eAAV,EAP/B;;EASA,IAAIN,IAAI,GAAG,CAAX,EAAc;IACZ,OAAO,CAAC,CAAR;EACD,CAFD,MAEO,IAAIA,IAAI,GAAG,CAAX,EAAc;IACnB,OAAO,CAAP,CADmB,CAEnB;EACD,CAHM,MAGA;IACL,OAAOA,IAAP;EACD;AACF,C,CAED;;;AACA,eAAef,gBAAf"},"metadata":{},"sourceType":"module"}