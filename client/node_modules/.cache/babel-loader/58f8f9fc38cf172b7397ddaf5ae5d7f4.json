{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n/**\r\n * The {@link getWeekYear} function options.\r\n */\n\n/**\r\n * @name getWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Get the local week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the local week-numbering year of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The local week-numbering year\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 with the default settings?\r\n * const result = getWeekYear(new Date(2004, 11, 26))\r\n * //=> 2005\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\r\n * //=> 2004\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\r\n * //=> 2004\r\n */\n\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n} // Fallback for modularized imports:\n\nexport default getWeekYear;","map":{"version":3,"names":["constructFrom","startOfWeek","toDate","getDefaultOptions","getWeekYear","date","options","_date","year","getFullYear","defaultOptions","firstWeekContainsDate","locale","firstWeekOfNextYear","setFullYear","setHours","startOfNextYear","firstWeekOfThisYear","startOfThisYear","getTime"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/getWeekYear.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { startOfWeek } from \"./startOfWeek.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\r\n\r\n/**\r\n * The {@link getWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name getWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Get the local week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the local week-numbering year of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The local week-numbering year\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 with the default settings?\r\n * const result = getWeekYear(new Date(2004, 11, 26))\r\n * //=> 2005\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\r\n * //=> 2004\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\r\n * //=> 2004\r\n */\r\nexport function getWeekYear(date, options) {\r\n  const _date = toDate(date);\r\n  const year = _date.getFullYear();\r\n\r\n  const defaultOptions = getDefaultOptions();\r\n  const firstWeekContainsDate =\r\n    options?.firstWeekContainsDate ??\r\n    options?.locale?.options?.firstWeekContainsDate ??\r\n    defaultOptions.firstWeekContainsDate ??\r\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\r\n    1;\r\n\r\n  const firstWeekOfNextYear = constructFrom(date, 0);\r\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\r\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\r\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\r\n\r\n  const firstWeekOfThisYear = constructFrom(date, 0);\r\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\r\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\r\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\r\n\r\n  if (_date.getTime() >= startOfNextYear.getTime()) {\r\n    return year + 1;\r\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\r\n    return year;\r\n  } else {\r\n    return year - 1;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getWeekYear;\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoC;EACzC,MAAMC,KAAK,GAAGL,MAAM,CAACG,IAAD,CAApB;;EACA,MAAMG,IAAI,GAAGD,KAAK,CAACE,WAAN,EAAb;;EAEA,MAAMC,cAAc,GAAGP,iBAAiB,EAAxC;EACA,MAAMQ,qBAAqB,GACzBL,OAAO,EAAEK,qBAAT,IACAL,OAAO,EAAEM,MAAT,EAAiBN,OAAjB,EAA0BK,qBAD1B,IAEAD,cAAc,CAACC,qBAFf,IAGAD,cAAc,CAACE,MAAf,EAAuBN,OAAvB,EAAgCK,qBAHhC,IAIA,CALF;EAOA,MAAME,mBAAmB,GAAGb,aAAa,CAACK,IAAD,EAAO,CAAP,CAAzC;EACAQ,mBAAmB,CAACC,WAApB,CAAgCN,IAAI,GAAG,CAAvC,EAA0C,CAA1C,EAA6CG,qBAA7C;EACAE,mBAAmB,CAACE,QAApB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC;EACA,MAAMC,eAAe,GAAGf,WAAW,CAACY,mBAAD,EAAsBP,OAAtB,CAAnC;EAEA,MAAMW,mBAAmB,GAAGjB,aAAa,CAACK,IAAD,EAAO,CAAP,CAAzC;EACAY,mBAAmB,CAACH,WAApB,CAAgCN,IAAhC,EAAsC,CAAtC,EAAyCG,qBAAzC;EACAM,mBAAmB,CAACF,QAApB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC;EACA,MAAMG,eAAe,GAAGjB,WAAW,CAACgB,mBAAD,EAAsBX,OAAtB,CAAnC;;EAEA,IAAIC,KAAK,CAACY,OAAN,MAAmBH,eAAe,CAACG,OAAhB,EAAvB,EAAkD;IAChD,OAAOX,IAAI,GAAG,CAAd;EACD,CAFD,MAEO,IAAID,KAAK,CAACY,OAAN,MAAmBD,eAAe,CAACC,OAAhB,EAAvB,EAAkD;IACvD,OAAOX,IAAP;EACD,CAFM,MAEA;IACL,OAAOA,IAAI,GAAG,CAAd;EACD;AACF,C,CAED;;AACA,eAAeJ,WAAf"},"metadata":{},"sourceType":"module"}