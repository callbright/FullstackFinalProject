{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { setMonth } from \"./setMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * @name set\r\n * @category Common Helpers\r\n * @summary Set date values to a given date.\r\n *\r\n * @description\r\n * Set date values to a given date.\r\n *\r\n * Sets time values to date from object `values`.\r\n * A value is not set if it is undefined or null or doesn't exist in `values`.\r\n *\r\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\r\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\r\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param values - The date values to be set\r\n *\r\n * @returns The new date with options set\r\n *\r\n * @example\r\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\r\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\r\n * //=> Tue Oct 20 2015 00:00:00\r\n *\r\n * @example\r\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\r\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\r\n * //=> Mon Sep 01 2014 12:23:45\r\n */\n\nexport function set(date, values) {\n  let _date = toDate(date); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n\n  if (isNaN(+_date)) {\n    return constructFrom(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = setMonth(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n} // Fallback for modularized imports:\n\nexport default set;","map":{"version":3,"names":["constructFrom","setMonth","toDate","set","date","values","_date","isNaN","NaN","year","setFullYear","month","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/set.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { setMonth } from \"./setMonth.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name set\r\n * @category Common Helpers\r\n * @summary Set date values to a given date.\r\n *\r\n * @description\r\n * Set date values to a given date.\r\n *\r\n * Sets time values to date from object `values`.\r\n * A value is not set if it is undefined or null or doesn't exist in `values`.\r\n *\r\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\r\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\r\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param values - The date values to be set\r\n *\r\n * @returns The new date with options set\r\n *\r\n * @example\r\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\r\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\r\n * //=> Tue Oct 20 2015 00:00:00\r\n *\r\n * @example\r\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\r\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\r\n * //=> Mon Sep 01 2014 12:23:45\r\n */\r\n\r\nexport function set(date, values) {\r\n  let _date = toDate(date);\r\n\r\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\r\n  if (isNaN(+_date)) {\r\n    return constructFrom(date, NaN);\r\n  }\r\n\r\n  if (values.year != null) {\r\n    _date.setFullYear(values.year);\r\n  }\r\n\r\n  if (values.month != null) {\r\n    _date = setMonth(_date, values.month);\r\n  }\r\n\r\n  if (values.date != null) {\r\n    _date.setDate(values.date);\r\n  }\r\n\r\n  if (values.hours != null) {\r\n    _date.setHours(values.hours);\r\n  }\r\n\r\n  if (values.minutes != null) {\r\n    _date.setMinutes(values.minutes);\r\n  }\r\n\r\n  if (values.seconds != null) {\r\n    _date.setSeconds(values.seconds);\r\n  }\r\n\r\n  if (values.milliseconds != null) {\r\n    _date.setMilliseconds(values.milliseconds);\r\n  }\r\n\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default set;\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmBC,MAAnB,EAA2B;EAChC,IAAIC,KAAK,GAAGJ,MAAM,CAACE,IAAD,CAAlB,CADgC,CAGhC;;;EACA,IAAIG,KAAK,CAAC,CAACD,KAAF,CAAT,EAAmB;IACjB,OAAON,aAAa,CAACI,IAAD,EAAOI,GAAP,CAApB;EACD;;EAED,IAAIH,MAAM,CAACI,IAAP,IAAe,IAAnB,EAAyB;IACvBH,KAAK,CAACI,WAAN,CAAkBL,MAAM,CAACI,IAAzB;EACD;;EAED,IAAIJ,MAAM,CAACM,KAAP,IAAgB,IAApB,EAA0B;IACxBL,KAAK,GAAGL,QAAQ,CAACK,KAAD,EAAQD,MAAM,CAACM,KAAf,CAAhB;EACD;;EAED,IAAIN,MAAM,CAACD,IAAP,IAAe,IAAnB,EAAyB;IACvBE,KAAK,CAACM,OAAN,CAAcP,MAAM,CAACD,IAArB;EACD;;EAED,IAAIC,MAAM,CAACQ,KAAP,IAAgB,IAApB,EAA0B;IACxBP,KAAK,CAACQ,QAAN,CAAeT,MAAM,CAACQ,KAAtB;EACD;;EAED,IAAIR,MAAM,CAACU,OAAP,IAAkB,IAAtB,EAA4B;IAC1BT,KAAK,CAACU,UAAN,CAAiBX,MAAM,CAACU,OAAxB;EACD;;EAED,IAAIV,MAAM,CAACY,OAAP,IAAkB,IAAtB,EAA4B;IAC1BX,KAAK,CAACY,UAAN,CAAiBb,MAAM,CAACY,OAAxB;EACD;;EAED,IAAIZ,MAAM,CAACc,YAAP,IAAuB,IAA3B,EAAiC;IAC/Bb,KAAK,CAACc,eAAN,CAAsBf,MAAM,CAACc,YAA7B;EACD;;EAED,OAAOb,KAAP;AACD,C,CAED;;AACA,eAAeH,GAAf"},"metadata":{},"sourceType":"module"}