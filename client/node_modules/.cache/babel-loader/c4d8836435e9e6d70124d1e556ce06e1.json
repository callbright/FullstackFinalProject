{"ast":null,"code":"import { addDays } from \"./addDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n/**\r\n * The {@link setDay} function options.\r\n */\n\n/**\r\n * @name setDay\r\n * @category Weekday Helpers\r\n * @summary Set the day of the week to the given date.\r\n *\r\n * @description\r\n * Set the day of the week to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param day - The day of the week of the new date\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date with the day of the week set\r\n *\r\n * @example\r\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\r\n * const result = setDay(new Date(2014, 8, 1), 0)\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Set week day to Sunday, with a weekStartsOn of Monday:\r\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\r\n * //=> Sun Sep 07 2014 00:00:00\r\n */\n\nexport function setDay(date, day, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = (_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0;\n\n  var _date = toDate(date);\n\n  var currentDay = _date.getDay();\n\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var delta = 7 - weekStartsOn;\n  var diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;\n  return addDays(_date, diff);\n} // Fallback for modularized imports:\n\nexport default setDay;","map":{"version":3,"names":["addDays","toDate","getDefaultOptions","setDay","date","day","options","defaultOptions","weekStartsOn","locale","_date","currentDay","getDay","remainder","dayIndex","delta","diff"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/setDay.mjs"],"sourcesContent":["import { addDays } from \"./addDays.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\r\n\r\n/**\r\n * The {@link setDay} function options.\r\n */\r\n\r\n/**\r\n * @name setDay\r\n * @category Weekday Helpers\r\n * @summary Set the day of the week to the given date.\r\n *\r\n * @description\r\n * Set the day of the week to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param day - The day of the week of the new date\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date with the day of the week set\r\n *\r\n * @example\r\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\r\n * const result = setDay(new Date(2014, 8, 1), 0)\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Set week day to Sunday, with a weekStartsOn of Monday:\r\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\r\n * //=> Sun Sep 07 2014 00:00:00\r\n */\r\nexport function setDay(date, day, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const weekStartsOn =\r\n    options?.weekStartsOn ??\r\n    options?.locale?.options?.weekStartsOn ??\r\n    defaultOptions.weekStartsOn ??\r\n    defaultOptions.locale?.options?.weekStartsOn ??\r\n    0;\r\n\r\n  const _date = toDate(date);\r\n  const currentDay = _date.getDay();\r\n\r\n  const remainder = day % 7;\r\n  const dayIndex = (remainder + 7) % 7;\r\n\r\n  const delta = 7 - weekStartsOn;\r\n  const diff =\r\n    day < 0 || day > 6\r\n      ? day - ((currentDay + delta) % 7)\r\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\r\n  return addDays(_date, diff);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setDay;\r\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;EAAA;;EACzC,IAAMC,cAAc,GAAGL,iBAAiB,EAAxC;EACA,IAAMM,YAAY,sDAChBF,OADgB,aAChBA,OADgB,uBAChBA,OAAO,CAAEE,YADO,yEAEhBF,OAFgB,aAEhBA,OAFgB,0CAEhBA,OAAO,CAAEG,MAFO,6EAEhB,gBAAiBH,OAFD,0DAEhB,sBAA0BE,YAFV,yCAGhBD,cAAc,CAACC,YAHC,kEAIhBD,cAAc,CAACE,MAJC,oFAIhB,sBAAuBH,OAJP,2DAIhB,uBAAgCE,YAJhB,uCAKhB,CALF;;EAOA,IAAME,KAAK,GAAGT,MAAM,CAACG,IAAD,CAApB;;EACA,IAAMO,UAAU,GAAGD,KAAK,CAACE,MAAN,EAAnB;;EAEA,IAAMC,SAAS,GAAGR,GAAG,GAAG,CAAxB;EACA,IAAMS,QAAQ,GAAG,CAACD,SAAS,GAAG,CAAb,IAAkB,CAAnC;EAEA,IAAME,KAAK,GAAG,IAAIP,YAAlB;EACA,IAAMQ,IAAI,GACRX,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAG,CAAjB,GACIA,GAAG,GAAI,CAACM,UAAU,GAAGI,KAAd,IAAuB,CADlC,GAEK,CAACD,QAAQ,GAAGC,KAAZ,IAAqB,CAAtB,GAA4B,CAACJ,UAAU,GAAGI,KAAd,IAAuB,CAHzD;EAIA,OAAOf,OAAO,CAACU,KAAD,EAAQM,IAAR,CAAd;AACD,C,CAED;;AACA,eAAeb,MAAf"},"metadata":{},"sourceType":"module"}