{"ast":null,"code":"import { eachDayOfInterval } from \"./eachDayOfInterval.mjs\";\nimport { isWeekend } from \"./isWeekend.mjs\";\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The given interval\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\n\nexport function eachWeekendOfInterval(interval) {\n  var dateInterval = eachDayOfInterval(interval);\n  var weekends = [];\n  var index = 0;\n\n  while (index < dateInterval.length) {\n    var date = dateInterval[index++];\n    if (isWeekend(date)) weekends.push(date);\n  }\n\n  return weekends;\n} // Fallback for modularized imports:\n\nexport default eachWeekendOfInterval;","map":{"version":3,"names":["eachDayOfInterval","isWeekend","eachWeekendOfInterval","interval","dateInterval","weekends","index","length","date","push"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/eachWeekendOfInterval.mjs"],"sourcesContent":["import { eachDayOfInterval } from \"./eachDayOfInterval.mjs\";\r\nimport { isWeekend } from \"./isWeekend.mjs\";\r\n\r\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The given interval\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\r\nexport function eachWeekendOfInterval(interval) {\r\n  const dateInterval = eachDayOfInterval(interval);\r\n  const weekends = [];\r\n  let index = 0;\r\n  while (index < dateInterval.length) {\r\n    const date = dateInterval[index++];\r\n    if (isWeekend(date)) weekends.push(date);\r\n  }\r\n  return weekends;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekendOfInterval;\r\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,yBAAlC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;EAC9C,IAAMC,YAAY,GAAGJ,iBAAiB,CAACG,QAAD,CAAtC;EACA,IAAME,QAAQ,GAAG,EAAjB;EACA,IAAIC,KAAK,GAAG,CAAZ;;EACA,OAAOA,KAAK,GAAGF,YAAY,CAACG,MAA5B,EAAoC;IAClC,IAAMC,IAAI,GAAGJ,YAAY,CAACE,KAAK,EAAN,CAAzB;IACA,IAAIL,SAAS,CAACO,IAAD,CAAb,EAAqBH,QAAQ,CAACI,IAAT,CAAcD,IAAd;EACtB;;EACD,OAAOH,QAAP;AACD,C,CAED;;AACA,eAAeH,qBAAf"},"metadata":{},"sourceType":"module"}