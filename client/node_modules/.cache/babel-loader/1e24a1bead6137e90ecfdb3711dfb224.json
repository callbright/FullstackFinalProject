{"ast":null,"code":"import _slicedToArray from \"C:/Users/Lions/FullstackFinalProject/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\n\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\n\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  var _sort = [+toDate(intervalLeft.start), +toDate(intervalLeft.end)].sort(function (a, b) {\n    return a - b;\n  }),\n      _sort2 = _slicedToArray(_sort, 2),\n      leftStartTime = _sort2[0],\n      leftEndTime = _sort2[1];\n\n  var _sort3 = [+toDate(intervalRight.start), +toDate(intervalRight.end)].sort(function (a, b) {\n    return a - b;\n  }),\n      _sort4 = _slicedToArray(_sort3, 2),\n      rightStartTime = _sort4[0],\n      rightEndTime = _sort4[1];\n\n  if (options !== null && options !== void 0 && options.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n} // Fallback for modularized imports:\n\nexport default areIntervalsOverlapping;","map":{"version":3,"names":["toDate","areIntervalsOverlapping","intervalLeft","intervalRight","options","start","end","sort","a","b","leftStartTime","leftEndTime","rightStartTime","rightEndTime","inclusive"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/areIntervalsOverlapping.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\r\n\r\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\r\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\r\n  const [leftStartTime, leftEndTime] = [\r\n    +toDate(intervalLeft.start),\r\n    +toDate(intervalLeft.end),\r\n  ].sort((a, b) => a - b);\r\n  const [rightStartTime, rightEndTime] = [\r\n    +toDate(intervalRight.start),\r\n    +toDate(intervalRight.end),\r\n  ].sort((a, b) => a - b);\r\n\r\n  if (options?.inclusive)\r\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\r\n\r\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default areIntervalsOverlapping;\r\n"],"mappings":";AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,YAAjC,EAA+CC,aAA/C,EAA8DC,OAA9D,EAAuE;EAC5E,YAAqC,CACnC,CAACJ,MAAM,CAACE,YAAY,CAACG,KAAd,CAD4B,EAEnC,CAACL,MAAM,CAACE,YAAY,CAACI,GAAd,CAF4B,EAGnCC,IAHmC,CAG9B,UAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAH8B,CAArC;EAAA;EAAA,IAAOC,aAAP;EAAA,IAAsBC,WAAtB;;EAIA,aAAuC,CACrC,CAACX,MAAM,CAACG,aAAa,CAACE,KAAf,CAD8B,EAErC,CAACL,MAAM,CAACG,aAAa,CAACG,GAAf,CAF8B,EAGrCC,IAHqC,CAGhC,UAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAHgC,CAAvC;EAAA;EAAA,IAAOG,cAAP;EAAA,IAAuBC,YAAvB;;EAKA,IAAIT,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEU,SAAb,EACE,OAAOJ,aAAa,IAAIG,YAAjB,IAAiCD,cAAc,IAAID,WAA1D;EAEF,OAAOD,aAAa,GAAGG,YAAhB,IAAgCD,cAAc,GAAGD,WAAxD;AACD,C,CAED;;AACA,eAAeV,uBAAf"},"metadata":{},"sourceType":"module"}