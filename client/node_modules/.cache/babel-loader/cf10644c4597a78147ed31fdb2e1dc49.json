{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { isSaturday } from \"./isSaturday.mjs\";\nimport { isSunday } from \"./isSunday.mjs\";\nimport { isWeekend } from \"./isWeekend.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * @name addBusinessDays\r\n * @category Date Extension Helpers\r\n * @summary Add the specified number of business days (mon - fri) to the given date.\r\n *\r\n * @description\r\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be added.\r\n *\r\n * @returns The new date with the business days added\r\n *\r\n * @example\r\n * // Add 10 business days to 1 September 2014:\r\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\r\n */\n\nexport function addBusinessDays(date, amount) {\n  var _date = toDate(date);\n\n  var startedOnWeekend = isWeekend(_date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n\n  var hours = _date.getHours();\n\n  var sign = amount < 0 ? -1 : 1;\n  var fullWeeks = Math.trunc(amount / 5);\n\n  _date.setDate(_date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n\n  var restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    _date.setDate(_date.getDate() + sign);\n\n    if (!isWeekend(_date)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && isWeekend(_date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if (isSaturday(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\n    if (isSunday(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  _date.setHours(hours);\n\n  return _date;\n} // Fallback for modularized imports:\n\nexport default addBusinessDays;","map":{"version":3,"names":["constructFrom","isSaturday","isSunday","isWeekend","toDate","addBusinessDays","date","amount","_date","startedOnWeekend","isNaN","NaN","hours","getHours","sign","fullWeeks","Math","trunc","setDate","getDate","restDays","abs","setHours"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/addBusinessDays.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { isSaturday } from \"./isSaturday.mjs\";\r\nimport { isSunday } from \"./isSunday.mjs\";\r\nimport { isWeekend } from \"./isWeekend.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name addBusinessDays\r\n * @category Date Extension Helpers\r\n * @summary Add the specified number of business days (mon - fri) to the given date.\r\n *\r\n * @description\r\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be added.\r\n *\r\n * @returns The new date with the business days added\r\n *\r\n * @example\r\n * // Add 10 business days to 1 September 2014:\r\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\r\n */\r\nexport function addBusinessDays(date, amount) {\r\n  const _date = toDate(date);\r\n  const startedOnWeekend = isWeekend(_date);\r\n\r\n  if (isNaN(amount)) return constructFrom(date, NaN);\r\n\r\n  const hours = _date.getHours();\r\n  const sign = amount < 0 ? -1 : 1;\r\n  const fullWeeks = Math.trunc(amount / 5);\r\n\r\n  _date.setDate(_date.getDate() + fullWeeks * 7);\r\n\r\n  // Get remaining days not part of a full week\r\n  let restDays = Math.abs(amount % 5);\r\n\r\n  // Loops over remaining days\r\n  while (restDays > 0) {\r\n    _date.setDate(_date.getDate() + sign);\r\n    if (!isWeekend(_date)) restDays -= 1;\r\n  }\r\n\r\n  // If the date is a weekend day and we reduce a dividable of\r\n  // 5 from it, we land on a weekend date.\r\n  // To counter this, we add days accordingly to land on the next business day\r\n  if (startedOnWeekend && isWeekend(_date) && amount !== 0) {\r\n    // If we're reducing days, we want to add days until we land on a weekday\r\n    // If we're adding days we want to reduce days until we land on a weekday\r\n    if (isSaturday(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\r\n    if (isSunday(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\r\n  }\r\n\r\n  // Restore hours to avoid DST lag\r\n  _date.setHours(hours);\r\n\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default addBusinessDays;\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;EAC5C,IAAMC,KAAK,GAAGJ,MAAM,CAACE,IAAD,CAApB;;EACA,IAAMG,gBAAgB,GAAGN,SAAS,CAACK,KAAD,CAAlC;EAEA,IAAIE,KAAK,CAACH,MAAD,CAAT,EAAmB,OAAOP,aAAa,CAACM,IAAD,EAAOK,GAAP,CAApB;;EAEnB,IAAMC,KAAK,GAAGJ,KAAK,CAACK,QAAN,EAAd;;EACA,IAAMC,IAAI,GAAGP,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA/B;EACA,IAAMQ,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWV,MAAM,GAAG,CAApB,CAAlB;;EAEAC,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,OAAN,KAAkBJ,SAAS,GAAG,CAA5C,EAV4C,CAY5C;;;EACA,IAAIK,QAAQ,GAAGJ,IAAI,CAACK,GAAL,CAASd,MAAM,GAAG,CAAlB,CAAf,CAb4C,CAe5C;;EACA,OAAOa,QAAQ,GAAG,CAAlB,EAAqB;IACnBZ,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,OAAN,KAAkBL,IAAhC;;IACA,IAAI,CAACX,SAAS,CAACK,KAAD,CAAd,EAAuBY,QAAQ,IAAI,CAAZ;EACxB,CAnB2C,CAqB5C;EACA;EACA;;;EACA,IAAIX,gBAAgB,IAAIN,SAAS,CAACK,KAAD,CAA7B,IAAwCD,MAAM,KAAK,CAAvD,EAA0D;IACxD;IACA;IACA,IAAIN,UAAU,CAACO,KAAD,CAAd,EAAuBA,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,OAAN,MAAmBL,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAC,CAAnC,CAAd;IACvB,IAAIZ,QAAQ,CAACM,KAAD,CAAZ,EAAqBA,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,OAAN,MAAmBL,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAC,CAAnC,CAAd;EACtB,CA7B2C,CA+B5C;;;EACAN,KAAK,CAACc,QAAN,CAAeV,KAAf;;EAEA,OAAOJ,KAAP;AACD,C,CAED;;AACA,eAAeH,eAAf"},"metadata":{},"sourceType":"module"}