{"ast":null,"code":"import { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\n/**\r\n * @name isSameISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Are the given dates in the same ISO week-numbering year?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week-numbering year?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same ISO week-numbering year\r\n *\r\n * @example\r\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\r\n * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\r\n * //=> true\r\n */\n\nexport function isSameISOWeekYear(dateLeft, dateRight) {\n  var dateLeftStartOfYear = startOfISOWeekYear(dateLeft);\n  var dateRightStartOfYear = startOfISOWeekYear(dateRight);\n  return +dateLeftStartOfYear === +dateRightStartOfYear;\n} // Fallback for modularized imports:\n\nexport default isSameISOWeekYear;","map":{"version":3,"names":["startOfISOWeekYear","isSameISOWeekYear","dateLeft","dateRight","dateLeftStartOfYear","dateRightStartOfYear"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/isSameISOWeekYear.mjs"],"sourcesContent":["import { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\r\n\r\n/**\r\n * @name isSameISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Are the given dates in the same ISO week-numbering year?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week-numbering year?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same ISO week-numbering year\r\n *\r\n * @example\r\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\r\n * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\r\n * //=> true\r\n */\r\nexport function isSameISOWeekYear(dateLeft, dateRight) {\r\n  const dateLeftStartOfYear = startOfISOWeekYear(dateLeft);\r\n  const dateRightStartOfYear = startOfISOWeekYear(dateRight);\r\n\r\n  return +dateLeftStartOfYear === +dateRightStartOfYear;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameISOWeekYear;\r\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,0BAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,SAArC,EAAgD;EACrD,IAAMC,mBAAmB,GAAGJ,kBAAkB,CAACE,QAAD,CAA9C;EACA,IAAMG,oBAAoB,GAAGL,kBAAkB,CAACG,SAAD,CAA/C;EAEA,OAAO,CAACC,mBAAD,KAAyB,CAACC,oBAAjC;AACD,C,CAED;;AACA,eAAeJ,iBAAf"},"metadata":{},"sourceType":"module"}