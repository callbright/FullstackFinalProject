{"ast":null,"code":"var _jsxFileName = \"/Users/ChristianAllbright/final-project-callbright/client/src/components/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Card.css';\nimport more from './more.png';\nimport { Link } from 'react-router-dom';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Card = props => {\n  _s();\n\n  const [count, setCount] = useState(0); // Initialize count to 0\n  // Fetch the current upvote count from the database when the component mounts\n\n  useEffect(() => {\n    const fetchUpvotes = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('criteria').select('upvotes').eq('id', props.id).single(); // Ensures that we only get one record\n\n      if (data) {\n        setCount(data.upvotes);\n      } else {\n        console.error('Error fetching upvotes:', error);\n      }\n    };\n\n    fetchUpvotes();\n  }, [props.id]); // Dependency array with props.id ensures that this runs if the id changes\n\n  const updateCount = async event => {\n    event.preventDefault(); // Optimistically update the frontend\n\n    const newCount = count + 1;\n    setCount(newCount); // Attempt to update the backend\n\n    const {\n      error\n    } = await supabase.from('criteria').update({\n      upvotes: newCount\n    }).eq('id', props.id); // Handle any error by reverting the frontend update (or another appropriate action)\n\n    if (error) {\n      console.error('Failed to update upvotes:', error);\n      setCount(count); // Revert to the old count if needed\n\n      alert('Failed to update upvotes. Please try again!');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Card\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: 'edit/' + props.id,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"moreButton\",\n        alt: \"edit button\",\n        src: more\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"subtopic\",\n      children: \"Subtopic: \" + props.subtopic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"content\",\n      children: \"Content: \" + props.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upvoteButton\",\n      onClick: updateCount,\n      children: [\"Upvotes \\u2B06\\uFE0F \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Card, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","more","Link","supabase","Card","props","count","setCount","fetchUpvotes","data","error","from","select","eq","id","single","upvotes","console","updateCount","event","preventDefault","newCount","update","alert","title","subtopic","content"],"sources":["/Users/ChristianAllbright/final-project-callbright/client/src/components/Card.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Card.css';\nimport more from './more.png';\nimport { Link } from 'react-router-dom';\nimport { supabase } from '../client';\n\nconst Card = (props) => {\n  const [count, setCount] = useState(0); // Initialize count to 0\n\n  // Fetch the current upvote count from the database when the component mounts\n  useEffect(() => {\n    const fetchUpvotes = async () => {\n      const { data, error } = await supabase\n        .from('criteria')\n        .select('upvotes')\n        .eq('id', props.id)\n        .single();  // Ensures that we only get one record\n\n      if (data) {\n        setCount(data.upvotes);\n      } else {\n        console.error('Error fetching upvotes:', error);\n      }\n    };\n\n    fetchUpvotes();\n  }, [props.id]);  // Dependency array with props.id ensures that this runs if the id changes\n\n  const updateCount = async (event) => {\n    event.preventDefault();\n  \n    // Optimistically update the frontend\n    const newCount = count + 1;\n    setCount(newCount);\n  \n    // Attempt to update the backend\n    const { error } = await supabase\n      .from('criteria')\n      .update({ upvotes: newCount })\n      .eq('id', props.id);\n  \n    // Handle any error by reverting the frontend update (or another appropriate action)\n    if (error) {\n      console.error('Failed to update upvotes:', error);\n      setCount(count);  // Revert to the old count if needed\n      alert('Failed to update upvotes. Please try again!');\n    }\n  };\n  \n\n  return (\n      <div className=\"Card\">\n          <Link to={'edit/'+ props.id}><img className=\"moreButton\" alt=\"edit button\" src={more} /></Link>\n          <h2 className=\"title\">{props.title}</h2>\n          <h3 className=\"subtopic\">{\"Subtopic: \" + props.subtopic}</h3>\n          <p className=\"content\">{\"Content: \" + props.content}</p>\n          <button className=\"upvoteButton\" onClick={updateCount}>Upvotes ⬆️ {count}</button>\n      </div>\n  );\n};\n\nexport default Card;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,WAAzB;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC,CADsB,CACiB;EAEvC;;EACAC,SAAS,CAAC,MAAM;IACd,MAAMQ,YAAY,GAAG,YAAY;MAC/B,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkB,MAAMP,QAAQ,CACnCQ,IAD2B,CACtB,UADsB,EAE3BC,MAF2B,CAEpB,SAFoB,EAG3BC,EAH2B,CAGxB,IAHwB,EAGlBR,KAAK,CAACS,EAHY,EAI3BC,MAJ2B,EAA9B,CAD+B,CAKjB;;MAEd,IAAIN,IAAJ,EAAU;QACRF,QAAQ,CAACE,IAAI,CAACO,OAAN,CAAR;MACD,CAFD,MAEO;QACLC,OAAO,CAACP,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;MACD;IACF,CAZD;;IAcAF,YAAY;EACb,CAhBQ,EAgBN,CAACH,KAAK,CAACS,EAAP,CAhBM,CAAT,CAJsB,CAoBL;;EAEjB,MAAMI,WAAW,GAAG,MAAOC,KAAP,IAAiB;IACnCA,KAAK,CAACC,cAAN,GADmC,CAGnC;;IACA,MAAMC,QAAQ,GAAGf,KAAK,GAAG,CAAzB;IACAC,QAAQ,CAACc,QAAD,CAAR,CALmC,CAOnC;;IACA,MAAM;MAAEX;IAAF,IAAY,MAAMP,QAAQ,CAC7BQ,IADqB,CAChB,UADgB,EAErBW,MAFqB,CAEd;MAAEN,OAAO,EAAEK;IAAX,CAFc,EAGrBR,EAHqB,CAGlB,IAHkB,EAGZR,KAAK,CAACS,EAHM,CAAxB,CARmC,CAanC;;IACA,IAAIJ,KAAJ,EAAW;MACTO,OAAO,CAACP,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;MACAH,QAAQ,CAACD,KAAD,CAAR,CAFS,CAES;;MAClBiB,KAAK,CAAC,6CAAD,CAAL;IACD;EACF,CAnBD;;EAsBA,oBACI;IAAK,SAAS,EAAC,MAAf;IAAA,wBACI,QAAC,IAAD;MAAM,EAAE,EAAE,UAASlB,KAAK,CAACS,EAAzB;MAAA,uBAA6B;QAAK,SAAS,EAAC,YAAf;QAA4B,GAAG,EAAC,aAAhC;QAA8C,GAAG,EAAEb;MAAnD;QAAA;QAAA;QAAA;MAAA;IAA7B;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAI,SAAS,EAAC,OAAd;MAAA,UAAuBI,KAAK,CAACmB;IAA7B;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAI,SAAS,EAAC,UAAd;MAAA,UAA0B,eAAenB,KAAK,CAACoB;IAA/C;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAG,SAAS,EAAC,SAAb;MAAA,UAAwB,cAAcpB,KAAK,CAACqB;IAA5C;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKI;MAAQ,SAAS,EAAC,cAAlB;MAAiC,OAAO,EAAER,WAA1C;MAAA,oCAAmEZ,KAAnE;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AASD,CArDD;;GAAMF,I;;KAAAA,I;AAuDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}