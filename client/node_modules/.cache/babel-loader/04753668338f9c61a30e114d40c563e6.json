{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * @name closestTo\r\n * @category Common Helpers\r\n * @summary Return a date from the array closest to the given date.\r\n *\r\n * @description\r\n * Return a date from the array closest to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns The date from the array closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const result = closestTo(dateToCompare, [\r\n *   new Date(2000, 0, 1),\r\n *   new Date(2030, 0, 1)\r\n * ])\r\n * //=> Tue Jan 01 2030 00:00:00\r\n */\n\nexport function closestTo(dateToCompare, dates) {\n  var date = toDate(dateToCompare);\n  if (isNaN(Number(date))) return constructFrom(dateToCompare, NaN);\n  var timeToCompare = date.getTime();\n  var result;\n  var minDistance;\n  dates.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = constructFrom(dateToCompare, NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n} // Fallback for modularized imports:\n\nexport default closestTo;","map":{"version":3,"names":["constructFrom","toDate","closestTo","dateToCompare","dates","date","isNaN","Number","NaN","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","currentDate","distance","Math","abs"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/closestTo.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name closestTo\r\n * @category Common Helpers\r\n * @summary Return a date from the array closest to the given date.\r\n *\r\n * @description\r\n * Return a date from the array closest to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns The date from the array closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const result = closestTo(dateToCompare, [\r\n *   new Date(2000, 0, 1),\r\n *   new Date(2030, 0, 1)\r\n * ])\r\n * //=> Tue Jan 01 2030 00:00:00\r\n */\r\nexport function closestTo(dateToCompare, dates) {\r\n  const date = toDate(dateToCompare);\r\n\r\n  if (isNaN(Number(date))) return constructFrom(dateToCompare, NaN);\r\n\r\n  const timeToCompare = date.getTime();\r\n\r\n  let result;\r\n  let minDistance;\r\n  dates.forEach((dirtyDate) => {\r\n    const currentDate = toDate(dirtyDate);\r\n\r\n    if (isNaN(Number(currentDate))) {\r\n      result = constructFrom(dateToCompare, NaN);\r\n      minDistance = NaN;\r\n      return;\r\n    }\r\n\r\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\r\n    if (result == null || distance < minDistance) {\r\n      result = currentDate;\r\n      minDistance = distance;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default closestTo;\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,aAAnB,EAAkCC,KAAlC,EAAyC;EAC9C,IAAMC,IAAI,GAAGJ,MAAM,CAACE,aAAD,CAAnB;EAEA,IAAIG,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAAT,EAAyB,OAAOL,aAAa,CAACG,aAAD,EAAgBK,GAAhB,CAApB;EAEzB,IAAMC,aAAa,GAAGJ,IAAI,CAACK,OAAL,EAAtB;EAEA,IAAIC,MAAJ;EACA,IAAIC,WAAJ;EACAR,KAAK,CAACS,OAAN,CAAc,UAACC,SAAD,EAAe;IAC3B,IAAMC,WAAW,GAAGd,MAAM,CAACa,SAAD,CAA1B;;IAEA,IAAIR,KAAK,CAACC,MAAM,CAACQ,WAAD,CAAP,CAAT,EAAgC;MAC9BJ,MAAM,GAAGX,aAAa,CAACG,aAAD,EAAgBK,GAAhB,CAAtB;MACAI,WAAW,GAAGJ,GAAd;MACA;IACD;;IAED,IAAMQ,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAST,aAAa,GAAGM,WAAW,CAACL,OAAZ,EAAzB,CAAjB;;IACA,IAAIC,MAAM,IAAI,IAAV,IAAkBK,QAAQ,GAAGJ,WAAjC,EAA8C;MAC5CD,MAAM,GAAGI,WAAT;MACAH,WAAW,GAAGI,QAAd;IACD;EACF,CAdD;EAgBA,OAAOL,MAAP;AACD,C,CAED;;AACA,eAAeT,SAAf"},"metadata":{},"sourceType":"module"}