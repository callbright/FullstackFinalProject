{"ast":null,"code":"var _jsxFileName = \"/Users/ChristianAllbright/final-project-callbright/client/src/pages/ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../client';\nimport Card from '../components/Card';\nimport { Link } from 'react-router-dom'; // Import Link\n\nimport './ReadPosts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [sortType, setSortType] = useState('newest'); // Default sort type\n\n  useEffect(() => {\n    fetchPosts();\n  }, [sortType]); // Fetch posts again when sortType changes\n\n  const fetchPosts = async () => {\n    let query = supabase.from('criteria').select();\n\n    if (sortType === 'newest') {\n      query = query.order('created_at', {\n        ascending: false\n      });\n    } else if (sortType === 'upvotes') {\n      query = query.order('upvotes', {\n        ascending: false\n      });\n    }\n\n    const {\n      data,\n      error\n    } = await query;\n\n    if (error) {\n      console.error('Error fetching posts:', error);\n    } else {\n      setPosts(data);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSortType(e.target.value),\n      value: sortType,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"newest\",\n        children: \"Newest First\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"upvotes\",\n        children: \"Most Upvotes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ReadPosts\",\n      children: posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(Card, {\n        id: post.id,\n        title: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/post/${post.id}`,\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 65\n        }, this),\n        subtopic: post.subtopic,\n        content: post.content\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No New Posts \\uD83D\\uDE1E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"rKJeR1v7q0Gv6BMwk0Ovrbtz5sw=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Card","Link","ReadPosts","posts","setPosts","sortType","setSortType","fetchPosts","query","from","select","order","ascending","data","error","console","e","target","value","length","map","post","id","title","subtopic","content"],"sources":["/Users/ChristianAllbright/final-project-callbright/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../client';\nimport Card from '../components/Card';\nimport { Link } from 'react-router-dom';  // Import Link\nimport './ReadPosts.css';\n\nconst ReadPosts = () => {\n    const [posts, setPosts] = useState([]);\n    const [sortType, setSortType] = useState('newest');  // Default sort type\n\n    useEffect(() => {\n        fetchPosts();\n    }, [sortType]);  // Fetch posts again when sortType changes\n\n    const fetchPosts = async () => {\n        let query = supabase.from('criteria').select();\n\n        if (sortType === 'newest') {\n            query = query.order('created_at', { ascending: false });\n        } else if (sortType === 'upvotes') {\n            query = query.order('upvotes', { ascending: false });\n        }\n\n        const { data, error } = await query;\n        if (error) {\n            console.error('Error fetching posts:', error);\n        } else {\n            setPosts(data);\n        }\n    };\n\n    return (\n        <div>\n            <select onChange={(e) => setSortType(e.target.value)} value={sortType}>\n                <option value=\"newest\">Newest First</option>\n                <option value=\"upvotes\">Most Upvotes</option>\n            </select>\n            <div className=\"ReadPosts\">\n                {posts.length > 0 ? (\n                    posts.map((post) => (\n                        <Card key={post.id} id={post.id} title={<Link to={`/post/${post.id}`}>{post.title}</Link>} subtopic={post.subtopic} content={post.content} />\n                    ))\n                ) : (\n                    <h2>No New Posts ðŸ˜ž</h2>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAA0C;;AAC1C,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,QAAD,CAAxC,CAFoB,CAEiC;;EAErDC,SAAS,CAAC,MAAM;IACZS,UAAU;EACb,CAFQ,EAEN,CAACF,QAAD,CAFM,CAAT,CAJoB,CAMH;;EAEjB,MAAME,UAAU,GAAG,YAAY;IAC3B,IAAIC,KAAK,GAAGT,QAAQ,CAACU,IAAT,CAAc,UAAd,EAA0BC,MAA1B,EAAZ;;IAEA,IAAIL,QAAQ,KAAK,QAAjB,EAA2B;MACvBG,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,YAAZ,EAA0B;QAAEC,SAAS,EAAE;MAAb,CAA1B,CAAR;IACH,CAFD,MAEO,IAAIP,QAAQ,KAAK,SAAjB,EAA4B;MAC/BG,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,SAAZ,EAAuB;QAAEC,SAAS,EAAE;MAAb,CAAvB,CAAR;IACH;;IAED,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkB,MAAMN,KAA9B;;IACA,IAAIM,KAAJ,EAAW;MACPC,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;IACH,CAFD,MAEO;MACHV,QAAQ,CAACS,IAAD,CAAR;IACH;EACJ,CAfD;;EAiBA,oBACI;IAAA,wBACI;MAAQ,QAAQ,EAAGG,CAAD,IAAOV,WAAW,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAApC;MAAsD,KAAK,EAAEb,QAA7D;MAAA,wBACI;QAAQ,KAAK,EAAC,QAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAQ,KAAK,EAAC,SAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAKI;MAAK,SAAS,EAAC,WAAf;MAAA,UACKF,KAAK,CAACgB,MAAN,GAAe,CAAf,GACGhB,KAAK,CAACiB,GAAN,CAAWC,IAAD,iBACN,QAAC,IAAD;QAAoB,EAAE,EAAEA,IAAI,CAACC,EAA7B;QAAiC,KAAK,eAAE,QAAC,IAAD;UAAM,EAAE,EAAG,SAAQD,IAAI,CAACC,EAAG,EAA3B;UAAA,UAA+BD,IAAI,CAACE;QAApC;UAAA;UAAA;UAAA;QAAA,QAAxC;QAA2F,QAAQ,EAAEF,IAAI,CAACG,QAA1G;QAAoH,OAAO,EAAEH,IAAI,CAACI;MAAlI,GAAWJ,IAAI,CAACC,EAAhB;QAAA;QAAA;QAAA;MAAA,QADJ,CADH,gBAKG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IANR;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH,CA1CD;;GAAMpB,S;;KAAAA,S;AA4CN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}