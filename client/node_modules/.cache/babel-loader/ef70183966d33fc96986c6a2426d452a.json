{"ast":null,"code":"import PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder {\n  constructor(url, _ref) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = _ref;\n    this.url = url;\n    this.headers = headers;\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\r\n   * Perform a SELECT query on the table or view.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   *\r\n   * @param options.count - Count algorithm to use to count rows in the table or view.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\n\n\n  select(columns) {\n    let {\n      head = false,\n      count\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = head ? 'HEAD' : 'GET'; // Remove whitespaces except when quoted\n\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\r\n   * Perform an INSERT into the table or view.\r\n   *\r\n   * By default, inserted rows are not returned. To return it, chain the call\r\n   * with `.select()`.\r\n   *\r\n   * @param values - The values to insert. Pass an object to insert a single row\r\n   * or an array to insert multiple rows.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count inserted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   *\r\n   * @param options.defaultToNull - Make missing fields default to `null`.\r\n   * Otherwise, use the default value for the column. Only applies for bulk\r\n   * inserts.\r\n   */\n\n\n  insert(values) {\n    let {\n      count,\n      defaultToNull = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = 'POST';\n    const prefersHeaders = [];\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer']);\n    }\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default');\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\r\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\r\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\r\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\r\n   * exist, or if it does exist, perform an alternative action depending on\r\n   * `ignoreDuplicates`.\r\n   *\r\n   * By default, upserted rows are not returned. To return it, chain the call\r\n   * with `.select()`.\r\n   *\r\n   * @param values - The values to upsert with. Pass an object to upsert a\r\n   * single row or an array to upsert multiple rows.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\r\n   * duplicate rows are determined. Two rows are duplicates if all the\r\n   * `onConflict` columns are equal.\r\n   *\r\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\r\n   * `false`, duplicate rows are merged with existing rows.\r\n   *\r\n   * @param options.count - Count algorithm to use to count upserted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   *\r\n   * @param options.defaultToNull - Make missing fields default to `null`.\r\n   * Otherwise, use the default value for the column. This only applies when\r\n   * inserting new rows, not when merging with existing rows under\r\n   * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\r\n   */\n\n\n  upsert(values) {\n    let {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = 'POST';\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer']);\n    }\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default');\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\r\n   * Perform an UPDATE on the table or view.\r\n   *\r\n   * By default, updated rows are not returned. To return it, chain the call\r\n   * with `.select()` after filters.\r\n   *\r\n   * @param values - The values to update with\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count updated rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\n\n\n  update(values) {\n    let {\n      count\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = 'PATCH';\n    const prefersHeaders = [];\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer']);\n    }\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\r\n   * Perform a DELETE on the table or view.\r\n   *\r\n   * By default, deleted rows are not returned. To return it, chain the call\r\n   * with `.select()` after filters.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count deleted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\n\n\n  delete() {\n    let {\n      count\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const method = 'DELETE';\n    const prefersHeaders = [];\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestFilterBuilder","PostgrestQueryBuilder","constructor","url","headers","schema","fetch","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","allowEmpty","insert","values","defaultToNull","prefersHeaders","push","Array","isArray","reduce","acc","x","concat","Object","keys","length","uniqueColumns","Set","column","body","upsert","onConflict","ignoreDuplicates","undefined","update","delete","unshift"],"sources":["C:\\Users\\Lions\\final-project-callbright-1\\client\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestQueryBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\r\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\r\nimport { GetResult } from './select-query-parser'\r\nimport { Fetch, GenericSchema, GenericTable, GenericView } from './types'\r\n\r\nexport default class PostgrestQueryBuilder<\r\n  Schema extends GenericSchema,\r\n  Relation extends GenericTable | GenericView,\r\n  RelationName = unknown,\r\n  Relationships = Relation extends { Relationships: infer R } ? R : unknown\r\n> {\r\n  url: URL\r\n  headers: Record<string, string>\r\n  schema?: string\r\n  signal?: AbortSignal\r\n  fetch?: Fetch\r\n\r\n  constructor(\r\n    url: URL,\r\n    {\r\n      headers = {},\r\n      schema,\r\n      fetch,\r\n    }: {\r\n      headers?: Record<string, string>\r\n      schema?: string\r\n      fetch?: Fetch\r\n    }\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.schema = schema\r\n    this.fetch = fetch\r\n  }\r\n\r\n  /**\r\n   * Perform a SELECT query on the table or view.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   *\r\n   * @param options.count - Count algorithm to use to count rows in the table or view.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  select<\r\n    Query extends string = '*',\r\n    ResultOne = GetResult<Schema, Relation['Row'], RelationName, Relationships, Query>\r\n  >(\r\n    columns?: Query,\r\n    {\r\n      head = false,\r\n      count,\r\n    }: {\r\n      head?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], ResultOne[], RelationName, Relationships> {\r\n    const method = head ? 'HEAD' : 'GET'\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    const cleanedColumns = (columns ?? '*')\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    this.url.searchParams.set('select', cleanedColumns)\r\n    if (count) {\r\n      this.headers['Prefer'] = `count=${count}`\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<ResultOne[]>)\r\n  }\r\n\r\n  // TODO(v3): Make `defaultToNull` consistent for both single & bulk inserts.\r\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row,\r\n    options?: {\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    }\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\r\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row[],\r\n    options?: {\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n      defaultToNull?: boolean\r\n    }\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\r\n  /**\r\n   * Perform an INSERT into the table or view.\r\n   *\r\n   * By default, inserted rows are not returned. To return it, chain the call\r\n   * with `.select()`.\r\n   *\r\n   * @param values - The values to insert. Pass an object to insert a single row\r\n   * or an array to insert multiple rows.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count inserted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   *\r\n   * @param options.defaultToNull - Make missing fields default to `null`.\r\n   * Otherwise, use the default value for the column. Only applies for bulk\r\n   * inserts.\r\n   */\r\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row | Row[],\r\n    {\r\n      count,\r\n      defaultToNull = true,\r\n    }: {\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n      defaultToNull?: boolean\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\r\n    const method = 'POST'\r\n\r\n    const prefersHeaders = []\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.push(this.headers['Prefer'])\r\n    }\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    if (!defaultToNull) {\r\n      prefersHeaders.push('missing=default')\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    if (Array.isArray(values)) {\r\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\r\n      if (columns.length > 0) {\r\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\r\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\r\n      }\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      body: values,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n\r\n  // TODO(v3): Make `defaultToNull` consistent for both single & bulk upserts.\r\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row,\r\n    options?: {\r\n      onConflict?: string\r\n      ignoreDuplicates?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    }\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\r\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row[],\r\n    options?: {\r\n      onConflict?: string\r\n      ignoreDuplicates?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n      defaultToNull?: boolean\r\n    }\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\r\n  /**\r\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\r\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\r\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\r\n   * exist, or if it does exist, perform an alternative action depending on\r\n   * `ignoreDuplicates`.\r\n   *\r\n   * By default, upserted rows are not returned. To return it, chain the call\r\n   * with `.select()`.\r\n   *\r\n   * @param values - The values to upsert with. Pass an object to upsert a\r\n   * single row or an array to upsert multiple rows.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\r\n   * duplicate rows are determined. Two rows are duplicates if all the\r\n   * `onConflict` columns are equal.\r\n   *\r\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\r\n   * `false`, duplicate rows are merged with existing rows.\r\n   *\r\n   * @param options.count - Count algorithm to use to count upserted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   *\r\n   * @param options.defaultToNull - Make missing fields default to `null`.\r\n   * Otherwise, use the default value for the column. This only applies when\r\n   * inserting new rows, not when merging with existing rows under\r\n   * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\r\n   */\r\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row | Row[],\r\n    {\r\n      onConflict,\r\n      ignoreDuplicates = false,\r\n      count,\r\n      defaultToNull = true,\r\n    }: {\r\n      onConflict?: string\r\n      ignoreDuplicates?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n      defaultToNull?: boolean\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\r\n    const method = 'POST'\r\n\r\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`]\r\n\r\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.push(this.headers['Prefer'])\r\n    }\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    if (!defaultToNull) {\r\n      prefersHeaders.push('missing=default')\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    if (Array.isArray(values)) {\r\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\r\n      if (columns.length > 0) {\r\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\r\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\r\n      }\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      body: values,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n\r\n  /**\r\n   * Perform an UPDATE on the table or view.\r\n   *\r\n   * By default, updated rows are not returned. To return it, chain the call\r\n   * with `.select()` after filters.\r\n   *\r\n   * @param values - The values to update with\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count updated rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\r\n    values: Row,\r\n    {\r\n      count,\r\n    }: {\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\r\n    const method = 'PATCH'\r\n    const prefersHeaders = []\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.push(this.headers['Prefer'])\r\n    }\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      body: values,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n\r\n  /**\r\n   * Perform a DELETE on the table or view.\r\n   *\r\n   * By default, deleted rows are not returned. To return it, chain the call\r\n   * with `.select()` after filters.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count deleted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  delete({\r\n    count,\r\n  }: {\r\n    count?: 'exact' | 'planned' | 'estimated'\r\n  } = {}): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\r\n    const method = 'DELETE'\r\n    const prefersHeaders = []\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.unshift(this.headers['Prefer'])\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}