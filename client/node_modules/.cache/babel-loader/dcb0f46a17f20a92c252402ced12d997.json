{"ast":null,"code":"import { getWeekYear } from \"../../../getWeekYear.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\"; // Local week-numbering year\n\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"YY\"\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n\n      case \"Yo\":\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\"y\", \"R\", \"u\", \"Q\", \"q\", \"M\", \"L\", \"I\", \"d\", \"D\", \"i\", \"t\", \"T\"];\n}","map":{"version":3,"names":["getWeekYear","startOfWeek","Parser","mapValue","normalizeTwoDigitYear","parseNDigits","LocalWeekYearParser","priority","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","ordinalNumber","unit","length","validate","_date","value","set","date","flags","options","currentYear","normalizedTwoDigitYear","setFullYear","firstWeekContainsDate","setHours","era","incompatibleTokens"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs"],"sourcesContent":["import { getWeekYear } from \"../../../getWeekYear.mjs\";\r\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\r\nimport { Parser } from \"../Parser.mjs\";\r\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\r\n\r\n// Local week-numbering year\r\nexport class LocalWeekYearParser extends Parser {\r\n  priority = 130;\r\n\r\n  parse(dateString, token, match) {\r\n    const valueCallback = (year) => ({\r\n      year,\r\n      isTwoDigitYear: token === \"YY\",\r\n    });\r\n\r\n    switch (token) {\r\n      case \"Y\":\r\n        return mapValue(parseNDigits(4, dateString), valueCallback);\r\n      case \"Yo\":\r\n        return mapValue(\r\n          match.ordinalNumber(dateString, {\r\n            unit: \"year\",\r\n          }),\r\n          valueCallback,\r\n        );\r\n      default:\r\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value.isTwoDigitYear || value.year > 0;\r\n  }\r\n\r\n  set(date, flags, value, options) {\r\n    const currentYear = getWeekYear(date, options);\r\n\r\n    if (value.isTwoDigitYear) {\r\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\r\n        value.year,\r\n        currentYear,\r\n      );\r\n      date.setFullYear(\r\n        normalizedTwoDigitYear,\r\n        0,\r\n        options.firstWeekContainsDate,\r\n      );\r\n      date.setHours(0, 0, 0, 0);\r\n      return startOfWeek(date, options);\r\n    }\r\n\r\n    const year =\r\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\r\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\r\n    date.setHours(0, 0, 0, 0);\r\n    return startOfWeek(date, options);\r\n  }\r\n\r\n  incompatibleTokens = [\r\n    \"y\",\r\n    \"R\",\r\n    \"u\",\r\n    \"Q\",\r\n    \"q\",\r\n    \"M\",\r\n    \"L\",\r\n    \"I\",\r\n    \"d\",\r\n    \"D\",\r\n    \"i\",\r\n    \"t\",\r\n    \"T\",\r\n  ];\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,qBAAnB,EAA0CC,YAA1C,QAA8D,cAA9D,C,CAEA;;AACA,OAAO,MAAMC,mBAAN,SAAkCJ,MAAlC,CAAyC;EAC9CK,QAAQ,GAAG,GAAH;;EAERC,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;IAC9B,MAAMC,aAAa,GAAIC,IAAD,KAAW;MAC/BA,IAD+B;MAE/BC,cAAc,EAAEJ,KAAK,KAAK;IAFK,CAAX,CAAtB;;IAKA,QAAQA,KAAR;MACE,KAAK,GAAL;QACE,OAAOP,QAAQ,CAACE,YAAY,CAAC,CAAD,EAAII,UAAJ,CAAb,EAA8BG,aAA9B,CAAf;;MACF,KAAK,IAAL;QACE,OAAOT,QAAQ,CACbQ,KAAK,CAACI,aAAN,CAAoBN,UAApB,EAAgC;UAC9BO,IAAI,EAAE;QADwB,CAAhC,CADa,EAIbJ,aAJa,CAAf;;MAMF;QACE,OAAOT,QAAQ,CAACE,YAAY,CAACK,KAAK,CAACO,MAAP,EAAeR,UAAf,CAAb,EAAyCG,aAAzC,CAAf;IAXJ;EAaD;;EAEDM,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;IACrB,OAAOA,KAAK,CAACN,cAAN,IAAwBM,KAAK,CAACP,IAAN,GAAa,CAA5C;EACD;;EAEDQ,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcH,KAAd,EAAqBI,OAArB,EAA8B;IAC/B,MAAMC,WAAW,GAAGzB,WAAW,CAACsB,IAAD,EAAOE,OAAP,CAA/B;;IAEA,IAAIJ,KAAK,CAACN,cAAV,EAA0B;MACxB,MAAMY,sBAAsB,GAAGtB,qBAAqB,CAClDgB,KAAK,CAACP,IAD4C,EAElDY,WAFkD,CAApD;MAIAH,IAAI,CAACK,WAAL,CACED,sBADF,EAEE,CAFF,EAGEF,OAAO,CAACI,qBAHV;MAKAN,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;MACA,OAAO5B,WAAW,CAACqB,IAAD,EAAOE,OAAP,CAAlB;IACD;;IAED,MAAMX,IAAI,GACR,EAAE,SAASU,KAAX,KAAqBA,KAAK,CAACO,GAAN,KAAc,CAAnC,GAAuCV,KAAK,CAACP,IAA7C,GAAoD,IAAIO,KAAK,CAACP,IADhE;IAEAS,IAAI,CAACK,WAAL,CAAiBd,IAAjB,EAAuB,CAAvB,EAA0BW,OAAO,CAACI,qBAAlC;IACAN,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;IACA,OAAO5B,WAAW,CAACqB,IAAD,EAAOE,OAAP,CAAlB;EACD;;EAEDO,kBAAkB,GAAG,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,CAAH;AApD4B"},"metadata":{},"sourceType":"module"}