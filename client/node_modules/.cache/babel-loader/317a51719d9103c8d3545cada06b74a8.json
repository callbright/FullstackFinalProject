{"ast":null,"code":"import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\r\n * The {@link roundToNearestMinutes} function options.\r\n */\n\n/**\r\n * @name roundToNearestMinutes\r\n * @category Minute Helpers\r\n * @summary Rounds the given date to the nearest minute\r\n *\r\n * @description\r\n * Rounds the given date to the nearest minute (or number of minutes).\r\n * Rounds up when the given date is exactly between the nearest round minutes.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to round\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date rounded to the closest minute\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\r\n * //=> Thu Jul 10 2014 12:13:00\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest quarter hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\r\n * //=> Thu Jul 10 2014 12:15:00\r\n *\r\n * @example\r\n * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\r\n * //=> Thu Jul 10 2014 12:12:00\r\n *\r\n * @example\r\n * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\r\n * //=> Thu Jul 10 2014 12:30:00\r\n */\n\nexport function roundToNearestMinutes(date, options) {\n  var _options$nearestTo, _options$roundingMeth;\n\n  var nearestTo = (_options$nearestTo = options === null || options === void 0 ? void 0 : options.nearestTo) !== null && _options$nearestTo !== void 0 ? _options$nearestTo : 1;\n  if (nearestTo < 1 || nearestTo > 30) return constructFrom(date, NaN);\n\n  var _date = toDate(date);\n\n  var fractionalSeconds = _date.getSeconds() / 60;\n  var fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60;\n  var minutes = _date.getMinutes() + fractionalSeconds + fractionalMilliseconds; // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n\n  var method = (_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : \"round\";\n  var roundingMethod = getRoundingMethod(method);\n  var roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  var result = constructFrom(date, _date);\n  result.setMinutes(roundedMinutes, 0, 0);\n  return result;\n} // Fallback for modularized imports:\n\nexport default roundToNearestMinutes;","map":{"version":3,"names":["getRoundingMethod","constructFrom","toDate","roundToNearestMinutes","date","options","nearestTo","NaN","_date","fractionalSeconds","getSeconds","fractionalMilliseconds","getMilliseconds","minutes","getMinutes","method","roundingMethod","roundedMinutes","result","setMinutes"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/roundToNearestMinutes.mjs"],"sourcesContent":["import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\r\nimport { constructFrom } from \"./constructFrom.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link roundToNearestMinutes} function options.\r\n */\r\n\r\n/**\r\n * @name roundToNearestMinutes\r\n * @category Minute Helpers\r\n * @summary Rounds the given date to the nearest minute\r\n *\r\n * @description\r\n * Rounds the given date to the nearest minute (or number of minutes).\r\n * Rounds up when the given date is exactly between the nearest round minutes.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to round\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date rounded to the closest minute\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\r\n * //=> Thu Jul 10 2014 12:13:00\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest quarter hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\r\n * //=> Thu Jul 10 2014 12:15:00\r\n *\r\n * @example\r\n * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\r\n * //=> Thu Jul 10 2014 12:12:00\r\n *\r\n * @example\r\n * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\r\n * //=> Thu Jul 10 2014 12:30:00\r\n */\r\nexport function roundToNearestMinutes(date, options) {\r\n  const nearestTo = options?.nearestTo ?? 1;\r\n\r\n  if (nearestTo < 1 || nearestTo > 30) return constructFrom(date, NaN);\r\n\r\n  const _date = toDate(date);\r\n  const fractionalSeconds = _date.getSeconds() / 60;\r\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60;\r\n  const minutes =\r\n    _date.getMinutes() + fractionalSeconds + fractionalMilliseconds;\r\n\r\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\r\n  const method = options?.roundingMethod ?? \"round\";\r\n  const roundingMethod = getRoundingMethod(method);\r\n\r\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\r\n\r\n  const result = constructFrom(date, _date);\r\n  result.setMinutes(roundedMinutes, 0, 0);\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default roundToNearestMinutes;\r\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,8BAAlC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,OAArC,EAA8C;EAAA;;EACnD,IAAMC,SAAS,yBAAGD,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEC,SAAZ,mEAAyB,CAAxC;EAEA,IAAIA,SAAS,GAAG,CAAZ,IAAiBA,SAAS,GAAG,EAAjC,EAAqC,OAAOL,aAAa,CAACG,IAAD,EAAOG,GAAP,CAApB;;EAErC,IAAMC,KAAK,GAAGN,MAAM,CAACE,IAAD,CAApB;;EACA,IAAMK,iBAAiB,GAAGD,KAAK,CAACE,UAAN,KAAqB,EAA/C;EACA,IAAMC,sBAAsB,GAAGH,KAAK,CAACI,eAAN,KAA0B,IAA1B,GAAiC,EAAhE;EACA,IAAMC,OAAO,GACXL,KAAK,CAACM,UAAN,KAAqBL,iBAArB,GAAyCE,sBAD3C,CARmD,CAWnD;;EACA,IAAMI,MAAM,4BAAGV,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEW,cAAZ,yEAA8B,OAA1C;EACA,IAAMA,cAAc,GAAGhB,iBAAiB,CAACe,MAAD,CAAxC;EAEA,IAAME,cAAc,GAAGD,cAAc,CAACH,OAAO,GAAGP,SAAX,CAAd,GAAsCA,SAA7D;EAEA,IAAMY,MAAM,GAAGjB,aAAa,CAACG,IAAD,EAAOI,KAAP,CAA5B;EACAU,MAAM,CAACC,UAAP,CAAkBF,cAAlB,EAAkC,CAAlC,EAAqC,CAArC;EACA,OAAOC,MAAP;AACD,C,CAED;;AACA,eAAef,qBAAf"},"metadata":{},"sourceType":"module"}