{"ast":null,"code":"import { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\nvar days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n/**\r\n * @name formatRFC7231\r\n * @category Common Helpers\r\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\r\n *\r\n * @description\r\n * Return the formatted date string in RFC 7231 format.\r\n * The result will always be in UTC timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 7231 format:\r\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\r\n */\n\nexport function formatRFC7231(date) {\n  var _date = toDate(date);\n\n  if (!isValid(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  var dayName = days[_date.getUTCDay()];\n\n  var dayOfMonth = addLeadingZeros(_date.getUTCDate(), 2);\n\n  var monthName = months[_date.getUTCMonth()];\n\n  var year = _date.getUTCFullYear();\n\n  var hour = addLeadingZeros(_date.getUTCHours(), 2);\n  var minute = addLeadingZeros(_date.getUTCMinutes(), 2);\n  var second = addLeadingZeros(_date.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n} // Fallback for modularized imports:\n\nexport default formatRFC7231;","map":{"version":3,"names":["isValid","toDate","addLeadingZeros","days","months","formatRFC7231","date","_date","RangeError","dayName","getUTCDay","dayOfMonth","getUTCDate","monthName","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds"],"sources":["C:/Users/Lions/FullstackFinalProject/client/node_modules/date-fns/formatRFC7231.mjs"],"sourcesContent":["import { isValid } from \"./isValid.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\r\n\r\nconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\nconst months = [\r\n  \"Jan\",\r\n  \"Feb\",\r\n  \"Mar\",\r\n  \"Apr\",\r\n  \"May\",\r\n  \"Jun\",\r\n  \"Jul\",\r\n  \"Aug\",\r\n  \"Sep\",\r\n  \"Oct\",\r\n  \"Nov\",\r\n  \"Dec\",\r\n];\r\n\r\n/**\r\n * @name formatRFC7231\r\n * @category Common Helpers\r\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\r\n *\r\n * @description\r\n * Return the formatted date string in RFC 7231 format.\r\n * The result will always be in UTC timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 7231 format:\r\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\r\n */\r\nexport function formatRFC7231(date) {\r\n  const _date = toDate(date);\r\n\r\n  if (!isValid(_date)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const dayName = days[_date.getUTCDay()];\r\n  const dayOfMonth = addLeadingZeros(_date.getUTCDate(), 2);\r\n  const monthName = months[_date.getUTCMonth()];\r\n  const year = _date.getUTCFullYear();\r\n\r\n  const hour = addLeadingZeros(_date.getUTCHours(), 2);\r\n  const minute = addLeadingZeros(_date.getUTCMinutes(), 2);\r\n  const second = addLeadingZeros(_date.getUTCSeconds(), 2);\r\n\r\n  // Result variables.\r\n  return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatRFC7231;\r\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AAEA,IAAMC,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAb;AAEA,IAAMC,MAAM,GAAG,CACb,KADa,EAEb,KAFa,EAGb,KAHa,EAIb,KAJa,EAKb,KALa,EAMb,KANa,EAOb,KAPa,EAQb,KARa,EASb,KATa,EAUb,KAVa,EAWb,KAXa,EAYb,KAZa,CAAf;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAClC,IAAMC,KAAK,GAAGN,MAAM,CAACK,IAAD,CAApB;;EAEA,IAAI,CAACN,OAAO,CAACO,KAAD,CAAZ,EAAqB;IACnB,MAAM,IAAIC,UAAJ,CAAe,oBAAf,CAAN;EACD;;EAED,IAAMC,OAAO,GAAGN,IAAI,CAACI,KAAK,CAACG,SAAN,EAAD,CAApB;;EACA,IAAMC,UAAU,GAAGT,eAAe,CAACK,KAAK,CAACK,UAAN,EAAD,EAAqB,CAArB,CAAlC;;EACA,IAAMC,SAAS,GAAGT,MAAM,CAACG,KAAK,CAACO,WAAN,EAAD,CAAxB;;EACA,IAAMC,IAAI,GAAGR,KAAK,CAACS,cAAN,EAAb;;EAEA,IAAMC,IAAI,GAAGf,eAAe,CAACK,KAAK,CAACW,WAAN,EAAD,EAAsB,CAAtB,CAA5B;EACA,IAAMC,MAAM,GAAGjB,eAAe,CAACK,KAAK,CAACa,aAAN,EAAD,EAAwB,CAAxB,CAA9B;EACA,IAAMC,MAAM,GAAGnB,eAAe,CAACK,KAAK,CAACe,aAAN,EAAD,EAAwB,CAAxB,CAA9B,CAdkC,CAgBlC;;EACA,iBAAUb,OAAV,eAAsBE,UAAtB,cAAoCE,SAApC,cAAiDE,IAAjD,cAAyDE,IAAzD,cAAiEE,MAAjE,cAA2EE,MAA3E;AACD,C,CAED;;AACA,eAAehB,aAAf"},"metadata":{},"sourceType":"module"}