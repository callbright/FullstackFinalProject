{"ast":null,"code":"import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = value => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);\n      // 01, 02, ..., 12\n\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n\n      case \"Lo\":\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: \"month\"\n        }), valueCallback);\n      // Jan, Feb, ..., Dec\n\n      case \"LLL\":\n        return match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n      // J, F, ..., D\n\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n      // January, February, ..., December\n\n      case \"LLLL\":\n      default:\n        return match.month(dateString, {\n          width: \"wide\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"Q\", \"M\", \"w\", \"I\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}","map":{"version":3,"names":["numericPatterns","Parser","mapValue","parseNDigits","parseNumericPattern","StandAloneMonthParser","priority","parse","dateString","token","match","valueCallback","value","month","ordinalNumber","unit","width","context","validate","_date","set","date","_flags","setMonth","setHours","incompatibleTokens"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.mjs"],"sourcesContent":["import { numericPatterns } from \"../constants.mjs\";\r\nimport { Parser } from \"../Parser.mjs\";\r\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\r\n\r\nexport class StandAloneMonthParser extends Parser {\r\n  priority = 110;\r\n\r\n  parse(dateString, token, match) {\r\n    const valueCallback = (value) => value - 1;\r\n\r\n    switch (token) {\r\n      // 1, 2, ..., 12\r\n      case \"L\":\r\n        return mapValue(\r\n          parseNumericPattern(numericPatterns.month, dateString),\r\n          valueCallback,\r\n        );\r\n      // 01, 02, ..., 12\r\n      case \"LL\":\r\n        return mapValue(parseNDigits(2, dateString), valueCallback);\r\n      // 1st, 2nd, ..., 12th\r\n      case \"Lo\":\r\n        return mapValue(\r\n          match.ordinalNumber(dateString, {\r\n            unit: \"month\",\r\n          }),\r\n          valueCallback,\r\n        );\r\n      // Jan, Feb, ..., Dec\r\n      case \"LLL\":\r\n        return (\r\n          match.month(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"standalone\",\r\n          }) ||\r\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\r\n        );\r\n\r\n      // J, F, ..., D\r\n      case \"LLLLL\":\r\n        return match.month(dateString, {\r\n          width: \"narrow\",\r\n          context: \"standalone\",\r\n        });\r\n      // January, February, ..., December\r\n      case \"LLLL\":\r\n      default:\r\n        return (\r\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\r\n          match.month(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"standalone\",\r\n          }) ||\r\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\r\n        );\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value >= 0 && value <= 11;\r\n  }\r\n\r\n  set(date, _flags, value) {\r\n    date.setMonth(value, 1);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n  }\r\n\r\n  incompatibleTokens = [\r\n    \"Y\",\r\n    \"R\",\r\n    \"q\",\r\n    \"Q\",\r\n    \"M\",\r\n    \"w\",\r\n    \"I\",\r\n    \"D\",\r\n    \"i\",\r\n    \"e\",\r\n    \"c\",\r\n    \"t\",\r\n    \"T\",\r\n  ];\r\n}\r\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,mBAAjC,QAA4D,cAA5D;AAEA,OAAO,MAAMC,qBAAN,SAAoCJ,MAApC,CAA2C;EAChDK,QAAQ,GAAG,GAAH;;EAERC,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;IAC9B,MAAMC,aAAa,GAAIC,KAAD,IAAWA,KAAK,GAAG,CAAzC;;IAEA,QAAQH,KAAR;MACE;MACA,KAAK,GAAL;QACE,OAAOP,QAAQ,CACbE,mBAAmB,CAACJ,eAAe,CAACa,KAAjB,EAAwBL,UAAxB,CADN,EAEbG,aAFa,CAAf;MAIF;;MACA,KAAK,IAAL;QACE,OAAOT,QAAQ,CAACC,YAAY,CAAC,CAAD,EAAIK,UAAJ,CAAb,EAA8BG,aAA9B,CAAf;MACF;;MACA,KAAK,IAAL;QACE,OAAOT,QAAQ,CACbQ,KAAK,CAACI,aAAN,CAAoBN,UAApB,EAAgC;UAC9BO,IAAI,EAAE;QADwB,CAAhC,CADa,EAIbJ,aAJa,CAAf;MAMF;;MACA,KAAK,KAAL;QACE,OACED,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;UACtBQ,KAAK,EAAE,aADe;UAEtBC,OAAO,EAAE;QAFa,CAAxB,KAIAP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;UAAEQ,KAAK,EAAE,QAAT;UAAmBC,OAAO,EAAE;QAA5B,CAAxB,CALF;MAQF;;MACA,KAAK,OAAL;QACE,OAAOP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;UAC7BQ,KAAK,EAAE,QADsB;UAE7BC,OAAO,EAAE;QAFoB,CAAxB,CAAP;MAIF;;MACA,KAAK,MAAL;MACA;QACE,OACEP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;UAAEQ,KAAK,EAAE,MAAT;UAAiBC,OAAO,EAAE;QAA1B,CAAxB,KACAP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;UACtBQ,KAAK,EAAE,aADe;UAEtBC,OAAO,EAAE;QAFa,CAAxB,CADA,IAKAP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;UAAEQ,KAAK,EAAE,QAAT;UAAmBC,OAAO,EAAE;QAA5B,CAAxB,CANF;IArCJ;EA8CD;;EAEDC,QAAQ,CAACC,KAAD,EAAQP,KAAR,EAAe;IACrB,OAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,EAA9B;EACD;;EAEDQ,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeV,KAAf,EAAsB;IACvBS,IAAI,CAACE,QAAL,CAAcX,KAAd,EAAqB,CAArB;IACAS,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;IACA,OAAOH,IAAP;EACD;;EAEDI,kBAAkB,GAAG,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,CAAH;AAhE8B"},"metadata":{},"sourceType":"module"}