{"ast":null,"code":"import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n  /**\r\n   * Match only rows where `column` is equal to `value`.\r\n   *\r\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  eq(column, value) {\n    this.url.searchParams.append(column, `eq.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is not equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n\n\n  neq(column, value) {\n    this.url.searchParams.append(column, `neq.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is greater than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n\n\n  gt(column, value) {\n    this.url.searchParams.append(column, `gt.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is greater than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n\n\n  gte(column, value) {\n    this.url.searchParams.append(column, `gte.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is less than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n\n\n  lt(column, value) {\n    this.url.searchParams.append(column, `lt.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is less than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n\n\n  lte(column, value) {\n    this.url.searchParams.append(column, `lte.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches `pattern` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\n\n\n  like(column, pattern) {\n    this.url.searchParams.append(column, `like.${pattern}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches all of `patterns` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\n\n\n  likeAllOf(column, patterns) {\n    this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches any of `patterns` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\n\n\n  likeAnyOf(column, patterns) {\n    this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches `pattern` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\n\n\n  ilike(column, pattern) {\n    this.url.searchParams.append(column, `ilike.${pattern}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches all of `patterns` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\n\n\n  ilikeAllOf(column, patterns) {\n    this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches any of `patterns` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\n\n\n  ilikeAnyOf(column, patterns) {\n    this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` IS `value`.\r\n   *\r\n   * For non-boolean columns, this is only relevant for checking if the value of\r\n   * `column` is NULL by setting `value` to `null`.\r\n   *\r\n   * For boolean columns, you can also set `value` to `true` or `false` and it\r\n   * will behave the same way as `.eq()`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n\n\n  is(column, value) {\n    this.url.searchParams.append(column, `is.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is included in the `values` array.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param values - The values array to filter with\r\n   */\n\n\n  in(column, values) {\n    const cleanedValues = Array.from(new Set(values)).map(s => {\n      // handle postgrest reserved characters\n      // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n      if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`;else return `${s}`;\n    }).join(',');\n    this.url.searchParams.append(column, `in.(${cleanedValues})`);\n    return this;\n  }\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * `column` contains every element appearing in `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\n\n\n  contains(column, value) {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * every element appearing in `column` is contained by `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\n\n\n  containedBy(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is greater than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n\n\n  rangeGt(column, range) {\n    this.url.searchParams.append(column, `sr.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or greater than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n\n\n  rangeGte(column, range) {\n    this.url.searchParams.append(column, `nxl.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is less than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n\n\n  rangeLt(column, range) {\n    this.url.searchParams.append(column, `sl.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or less than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n\n\n  rangeLte(column, range) {\n    this.url.searchParams.append(column, `nxr.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where `column` is\r\n   * mutually exclusive to `range` and there can be no element between the two\r\n   * ranges.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n\n\n  rangeAdjacent(column, range) {\n    this.url.searchParams.append(column, `adj.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for array and range columns. Match only rows where\r\n   * `column` and `value` have an element in common.\r\n   *\r\n   * @param column - The array or range column to filter on\r\n   * @param value - The array or range value to filter with\r\n   */\n\n\n  overlaps(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`);\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n    }\n\n    return this;\n  }\n  /**\r\n   * Only relevant for text and tsvector columns. Match only rows where\r\n   * `column` matches the query string in `query`.\r\n   *\r\n   * @param column - The text or tsvector column to filter on\r\n   * @param query - The query text to match with\r\n   * @param options - Named parameters\r\n   * @param options.config - The text search configuration to use\r\n   * @param options.type - Change how the `query` text is interpreted\r\n   */\n\n\n  textSearch(column, query) {\n    let {\n      config,\n      type\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let typePart = '';\n\n    if (type === 'plain') {\n      typePart = 'pl';\n    } else if (type === 'phrase') {\n      typePart = 'ph';\n    } else if (type === 'websearch') {\n      typePart = 'w';\n    }\n\n    const configPart = config === undefined ? '' : `(${config})`;\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where each column in `query` keys is equal to its\r\n   * associated value. Shorthand for multiple `.eq()`s.\r\n   *\r\n   * @param query - The object to filter with, with column names as keys mapped\r\n   * to their filter values\r\n   */\n\n\n  match(query) {\n    Object.entries(query).forEach(_ref => {\n      let [column, value] = _ref;\n      this.url.searchParams.append(column, `eq.${value}`);\n    });\n    return this;\n  }\n  /**\r\n   * Match only rows which doesn't satisfy the filter.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to be negated to filter with, following\r\n   * PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\n\n\n  not(column, operator, value) {\n    this.url.searchParams.append(column, `not.${operator}.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows which satisfy at least one of the filters.\r\n   *\r\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure it's properly sanitized.\r\n   *\r\n   * It's currently not possible to do an `.or()` filter across multiple tables.\r\n   *\r\n   * @param filters - The filters to use, following PostgREST syntax\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to filter on referenced tables\r\n   * instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `referencedTable` instead\r\n   */\n\n\n  or(filters) {\n    let {\n      foreignTable,\n      referencedTable = foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = referencedTable ? `${referencedTable}.or` : 'or';\n    this.url.searchParams.append(key, `(${filters})`);\n    return this;\n  }\n  /**\r\n   * Match only rows which satisfy the filter. This is an escape hatch - you\r\n   * should use the specific filter methods wherever possible.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to filter with, following PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\n\n\n  filter(column, operator, value) {\n    this.url.searchParams.append(column, `${operator}.${value}`);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestTransformBuilder","PostgrestFilterBuilder","eq","column","value","url","searchParams","append","neq","gt","gte","lt","lte","like","pattern","likeAllOf","patterns","join","likeAnyOf","ilike","ilikeAllOf","ilikeAnyOf","is","in","values","cleanedValues","Array","from","Set","map","s","RegExp","test","contains","isArray","JSON","stringify","containedBy","rangeGt","range","rangeGte","rangeLt","rangeLte","rangeAdjacent","overlaps","textSearch","query","config","type","typePart","configPart","undefined","match","Object","entries","forEach","not","operator","or","filters","foreignTable","referencedTable","key","filter"],"sources":["C:\\Users\\Lions\\final-project-callbright-1\\client\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestFilterBuilder.ts"],"sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder'\r\nimport { GenericSchema } from './types'\r\n\r\ntype FilterOperator =\r\n  | 'eq'\r\n  | 'neq'\r\n  | 'gt'\r\n  | 'gte'\r\n  | 'lt'\r\n  | 'lte'\r\n  | 'like'\r\n  | 'ilike'\r\n  | 'is'\r\n  | 'in'\r\n  | 'cs'\r\n  | 'cd'\r\n  | 'sl'\r\n  | 'sr'\r\n  | 'nxl'\r\n  | 'nxr'\r\n  | 'adj'\r\n  | 'ov'\r\n  | 'fts'\r\n  | 'plfts'\r\n  | 'phfts'\r\n  | 'wfts'\r\n\r\nexport default class PostgrestFilterBuilder<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result,\r\n  RelationName = unknown,\r\n  Relationships = unknown\r\n> extends PostgrestTransformBuilder<Schema, Row, Result, RelationName, Relationships> {\r\n  eq<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: NonNullable<Row[ColumnName]>\r\n  ): this\r\n  eq<Value extends unknown>(column: string, value: NonNullable<Value>): this\r\n  /**\r\n   * Match only rows where `column` is equal to `value`.\r\n   *\r\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  eq(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `eq.${value}`)\r\n    return this\r\n  }\r\n\r\n  neq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  neq(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is not equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  neq(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `neq.${value}`)\r\n    return this\r\n  }\r\n\r\n  gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  gt(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is greater than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  gt(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `gt.${value}`)\r\n    return this\r\n  }\r\n\r\n  gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  gte(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is greater than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  gte(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `gte.${value}`)\r\n    return this\r\n  }\r\n\r\n  lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  lt(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is less than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  lt(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `lt.${value}`)\r\n    return this\r\n  }\r\n\r\n  lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  lte(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is less than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  lte(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `lte.${value}`)\r\n    return this\r\n  }\r\n\r\n  like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\r\n  like(column: string, pattern: string): this\r\n  /**\r\n   * Match only rows where `column` matches `pattern` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\r\n  like(column: string, pattern: string): this {\r\n    this.url.searchParams.append(column, `like.${pattern}`)\r\n    return this\r\n  }\r\n\r\n  likeAllOf<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    patterns: readonly string[]\r\n  ): this\r\n  likeAllOf(column: string, patterns: readonly string[]): this\r\n  /**\r\n   * Match only rows where `column` matches all of `patterns` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  likeAllOf(column: string, patterns: readonly string[]): this {\r\n    this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  likeAnyOf<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    patterns: readonly string[]\r\n  ): this\r\n  likeAnyOf(column: string, patterns: readonly string[]): this\r\n  /**\r\n   * Match only rows where `column` matches any of `patterns` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  likeAnyOf(column: string, patterns: readonly string[]): this {\r\n    this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\r\n  ilike(column: string, pattern: string): this\r\n  /**\r\n   * Match only rows where `column` matches `pattern` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\r\n  ilike(column: string, pattern: string): this {\r\n    this.url.searchParams.append(column, `ilike.${pattern}`)\r\n    return this\r\n  }\r\n\r\n  ilikeAllOf<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    patterns: readonly string[]\r\n  ): this\r\n  ilikeAllOf(column: string, patterns: readonly string[]): this\r\n  /**\r\n   * Match only rows where `column` matches all of `patterns` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  ilikeAllOf(column: string, patterns: readonly string[]): this {\r\n    this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  ilikeAnyOf<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    patterns: readonly string[]\r\n  ): this\r\n  ilikeAnyOf(column: string, patterns: readonly string[]): this\r\n  /**\r\n   * Match only rows where `column` matches any of `patterns` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  ilikeAnyOf(column: string, patterns: readonly string[]): this {\r\n    this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  is<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: Row[ColumnName] & (boolean | null)\r\n  ): this\r\n  is(column: string, value: boolean | null): this\r\n  /**\r\n   * Match only rows where `column` IS `value`.\r\n   *\r\n   * For non-boolean columns, this is only relevant for checking if the value of\r\n   * `column` is NULL by setting `value` to `null`.\r\n   *\r\n   * For boolean columns, you can also set `value` to `true` or `false` and it\r\n   * will behave the same way as `.eq()`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  is(column: string, value: boolean | null): this {\r\n    this.url.searchParams.append(column, `is.${value}`)\r\n    return this\r\n  }\r\n\r\n  in<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    values: ReadonlyArray<Row[ColumnName]>\r\n  ): this\r\n  in(column: string, values: readonly unknown[]): this\r\n  /**\r\n   * Match only rows where `column` is included in the `values` array.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param values - The values array to filter with\r\n   */\r\n  in(column: string, values: readonly unknown[]): this {\r\n    const cleanedValues = Array.from(new Set(values))\r\n      .map((s) => {\r\n        // handle postgrest reserved characters\r\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\r\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\r\n        else return `${s}`\r\n      })\r\n      .join(',')\r\n    this.url.searchParams.append(column, `in.(${cleanedValues})`)\r\n    return this\r\n  }\r\n\r\n  contains<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | ReadonlyArray<Row[ColumnName]> | Record<string, unknown>\r\n  ): this\r\n  contains(column: string, value: string | readonly unknown[] | Record<string, unknown>): this\r\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * `column` contains every element appearing in `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\r\n  contains(column: string, value: string | readonly unknown[] | Record<string, unknown>): this {\r\n    if (typeof value === 'string') {\r\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\r\n      // keep it simple and accept a string\r\n      this.url.searchParams.append(column, `cs.${value}`)\r\n    } else if (Array.isArray(value)) {\r\n      // array\r\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`)\r\n    } else {\r\n      // json\r\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  containedBy<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | ReadonlyArray<Row[ColumnName]> | Record<string, unknown>\r\n  ): this\r\n  containedBy(column: string, value: string | readonly unknown[] | Record<string, unknown>): this\r\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * every element appearing in `column` is contained by `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\r\n  containedBy(column: string, value: string | readonly unknown[] | Record<string, unknown>): this {\r\n    if (typeof value === 'string') {\r\n      // range\r\n      this.url.searchParams.append(column, `cd.${value}`)\r\n    } else if (Array.isArray(value)) {\r\n      // array\r\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`)\r\n    } else {\r\n      // json\r\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeGt(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is greater than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeGt(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `sr.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeGte(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or greater than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeGte(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `nxl.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeLt(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is less than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeLt(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `sl.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeLte(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or less than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeLte(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `nxr.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeAdjacent(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where `column` is\r\n   * mutually exclusive to `range` and there can be no element between the two\r\n   * ranges.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeAdjacent(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `adj.${range}`)\r\n    return this\r\n  }\r\n\r\n  overlaps<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | ReadonlyArray<Row[ColumnName]>\r\n  ): this\r\n  overlaps(column: string, value: string | readonly unknown[]): this\r\n  /**\r\n   * Only relevant for array and range columns. Match only rows where\r\n   * `column` and `value` have an element in common.\r\n   *\r\n   * @param column - The array or range column to filter on\r\n   * @param value - The array or range value to filter with\r\n   */\r\n  overlaps(column: string, value: string | readonly unknown[]): this {\r\n    if (typeof value === 'string') {\r\n      // range\r\n      this.url.searchParams.append(column, `ov.${value}`)\r\n    } else {\r\n      // array\r\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  textSearch<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    query: string,\r\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\r\n  ): this\r\n  textSearch(\r\n    column: string,\r\n    query: string,\r\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\r\n  ): this\r\n  /**\r\n   * Only relevant for text and tsvector columns. Match only rows where\r\n   * `column` matches the query string in `query`.\r\n   *\r\n   * @param column - The text or tsvector column to filter on\r\n   * @param query - The query text to match with\r\n   * @param options - Named parameters\r\n   * @param options.config - The text search configuration to use\r\n   * @param options.type - Change how the `query` text is interpreted\r\n   */\r\n  textSearch(\r\n    column: string,\r\n    query: string,\r\n    { config, type }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' } = {}\r\n  ): this {\r\n    let typePart = ''\r\n    if (type === 'plain') {\r\n      typePart = 'pl'\r\n    } else if (type === 'phrase') {\r\n      typePart = 'ph'\r\n    } else if (type === 'websearch') {\r\n      typePart = 'w'\r\n    }\r\n    const configPart = config === undefined ? '' : `(${config})`\r\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`)\r\n    return this\r\n  }\r\n\r\n  match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this\r\n  match(query: Record<string, unknown>): this\r\n  /**\r\n   * Match only rows where each column in `query` keys is equal to its\r\n   * associated value. Shorthand for multiple `.eq()`s.\r\n   *\r\n   * @param query - The object to filter with, with column names as keys mapped\r\n   * to their filter values\r\n   */\r\n  match(query: Record<string, unknown>): this {\r\n    Object.entries(query).forEach(([column, value]) => {\r\n      this.url.searchParams.append(column, `eq.${value}`)\r\n    })\r\n    return this\r\n  }\r\n\r\n  not<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    operator: FilterOperator,\r\n    value: Row[ColumnName]\r\n  ): this\r\n  not(column: string, operator: string, value: unknown): this\r\n  /**\r\n   * Match only rows which doesn't satisfy the filter.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to be negated to filter with, following\r\n   * PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\r\n  not(column: string, operator: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `not.${operator}.${value}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Match only rows which satisfy at least one of the filters.\r\n   *\r\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure it's properly sanitized.\r\n   *\r\n   * It's currently not possible to do an `.or()` filter across multiple tables.\r\n   *\r\n   * @param filters - The filters to use, following PostgREST syntax\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to filter on referenced tables\r\n   * instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `referencedTable` instead\r\n   */\r\n  or(\r\n    filters: string,\r\n    {\r\n      foreignTable,\r\n      referencedTable = foreignTable,\r\n    }: { foreignTable?: string; referencedTable?: string } = {}\r\n  ): this {\r\n    const key = referencedTable ? `${referencedTable}.or` : 'or'\r\n    this.url.searchParams.append(key, `(${filters})`)\r\n    return this\r\n  }\r\n\r\n  filter<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    operator: `${'' | 'not.'}${FilterOperator}`,\r\n    value: unknown\r\n  ): this\r\n  filter(column: string, operator: string, value: unknown): this\r\n  /**\r\n   * Match only rows which satisfy the filter. This is an escape hatch - you\r\n   * should use the specific filter methods wherever possible.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to filter with, following PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\r\n  filter(column: string, operator: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `${operator}.${value}`)\r\n    return this\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}