{"ast":null,"code":"/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param argument - The value to convert\r\n *\r\n * @returns The parsed date in the local time zone\r\n *\r\n * @example\r\n * // Clone the date:\r\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\r\n * //=> Tue Feb 11 2014 11:30:30\r\n *\r\n * @example\r\n * // Convert the timestamp to date:\r\n * const result = toDate(1392098430000)\r\n * //=> Tue Feb 11 2014 11:30:30\r\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === \"object\" && argStr === \"[object Date]\") {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (typeof argument === \"number\" || argStr === \"[object Number]\" || typeof argument === \"string\" || argStr === \"[object String]\") {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n} // Fallback for modularized imports:\n\nexport default toDate;","map":{"version":3,"names":["toDate","argument","argStr","Object","prototype","toString","call","Date","constructor","NaN"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/toDate.mjs"],"sourcesContent":["/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param argument - The value to convert\r\n *\r\n * @returns The parsed date in the local time zone\r\n *\r\n * @example\r\n * // Clone the date:\r\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\r\n * //=> Tue Feb 11 2014 11:30:30\r\n *\r\n * @example\r\n * // Convert the timestamp to date:\r\n * const result = toDate(1392098430000)\r\n * //=> Tue Feb 11 2014 11:30:30\r\n */\r\nexport function toDate(argument) {\r\n  const argStr = Object.prototype.toString.call(argument);\r\n\r\n  // Clone the date\r\n  if (\r\n    argument instanceof Date ||\r\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\r\n  ) {\r\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\r\n    return new argument.constructor(+argument);\r\n  } else if (\r\n    typeof argument === \"number\" ||\r\n    argStr === \"[object Number]\" ||\r\n    typeof argument === \"string\" ||\r\n    argStr === \"[object String]\"\r\n  ) {\r\n    // TODO: Can we get rid of as?\r\n    return new Date(argument);\r\n  } else {\r\n    // TODO: Can we get rid of as?\r\n    return new Date(NaN);\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default toDate;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;EAC/B,MAAMC,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,QAA/B,CAAf,CAD+B,CAG/B;;EACA,IACEA,QAAQ,YAAYM,IAApB,IACC,OAAON,QAAP,KAAoB,QAApB,IAAgCC,MAAM,KAAK,eAF9C,EAGE;IACA;IACA,OAAO,IAAID,QAAQ,CAACO,WAAb,CAAyB,CAACP,QAA1B,CAAP;EACD,CAND,MAMO,IACL,OAAOA,QAAP,KAAoB,QAApB,IACAC,MAAM,KAAK,iBADX,IAEA,OAAOD,QAAP,KAAoB,QAFpB,IAGAC,MAAM,KAAK,iBAJN,EAKL;IACA;IACA,OAAO,IAAIK,IAAJ,CAASN,QAAT,CAAP;EACD,CARM,MAQA;IACL;IACA,OAAO,IAAIM,IAAJ,CAASE,GAAT,CAAP;EACD;AACF,C,CAED;;AACA,eAAeT,MAAf"},"metadata":{},"sourceType":"module"}