{"ast":null,"code":"import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\n\nexport default class PostgrestClient {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n\n  /**\r\n   * Creates a PostgREST client.\r\n   *\r\n   * @param url - URL of the PostgREST endpoint\r\n   * @param options - Named parameters\r\n   * @param options.headers - Custom headers\r\n   * @param options.schema - Postgres schema to switch to\r\n   * @param options.fetch - Custom fetch\r\n   */\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schemaName = schema;\n    this.fetch = fetch;\n  }\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\n\n\n  from(relation) {\n    const url = new URL(`${this.url}/${relation}`);\n    return new PostgrestQueryBuilder(url, {\n      headers: Object.assign({}, this.headers),\n      schema: this.schemaName,\n      fetch: this.fetch\n    });\n  }\n  /**\r\n   * Select a schema to query or perform an function (rpc) call.\r\n   *\r\n   * The schema needs to be on the list of exposed schemas inside Supabase.\r\n   *\r\n   * @param schema - The schema to query\r\n   */\n\n\n  schema(schema) {\n    return new PostgrestClient(this.url, {\n      headers: this.headers,\n      schema,\n      fetch: this.fetch\n    });\n  }\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.get - When set to `true`, the function will be called with\r\n   * read-only access mode.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\n\n\n  rpc(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      head = false,\n      get = false,\n      count\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let method;\n    const url = new URL(`${this.url}/rpc/${fn}`);\n    let body;\n\n    if (head || get) {\n      method = head ? 'HEAD' : 'GET';\n      Object.entries(args) // params with undefined value needs to be filtered out, otherwise it'll\n      // show up as `?param=undefined`\n      .filter(_ref => {\n        let [_, value] = _ref;\n        return value !== undefined;\n      }) // array values need special syntax\n      .map(_ref2 => {\n        let [name, value] = _ref2;\n        return [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`];\n      }).forEach(_ref3 => {\n        let [name, value] = _ref3;\n        url.searchParams.append(name, value);\n      });\n    } else {\n      method = 'POST';\n      body = args;\n    }\n\n    const headers = Object.assign({}, this.headers);\n\n    if (count) {\n      headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schemaName,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestQueryBuilder","PostgrestFilterBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","Object","schemaName","from","relation","URL","rpc","fn","args","head","get","count","method","body","entries","filter","_","value","undefined","map","name","Array","isArray","join","forEach","searchParams","append","allowEmpty"],"sources":["C:\\Users\\Lions\\final-project-callbright-1\\client\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder'\r\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\r\nimport PostgrestBuilder from './PostgrestBuilder'\r\nimport { DEFAULT_HEADERS } from './constants'\r\nimport { Fetch, GenericSchema } from './types'\r\n\r\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\r\nexport default class PostgrestClient<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n> {\r\n  url: string\r\n  headers: Record<string, string>\r\n  schemaName?: SchemaName\r\n  fetch?: Fetch\r\n\r\n  // TODO: Add back shouldThrowOnError once we figure out the typings\r\n  /**\r\n   * Creates a PostgREST client.\r\n   *\r\n   * @param url - URL of the PostgREST endpoint\r\n   * @param options - Named parameters\r\n   * @param options.headers - Custom headers\r\n   * @param options.schema - Postgres schema to switch to\r\n   * @param options.fetch - Custom fetch\r\n   */\r\n  constructor(\r\n    url: string,\r\n    {\r\n      headers = {},\r\n      schema,\r\n      fetch,\r\n    }: {\r\n      headers?: Record<string, string>\r\n      schema?: SchemaName\r\n      fetch?: Fetch\r\n    } = {}\r\n  ) {\r\n    this.url = url\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.schemaName = schema\r\n    this.fetch = fetch\r\n  }\r\n\r\n  from<\r\n    TableName extends string & keyof Schema['Tables'],\r\n    Table extends Schema['Tables'][TableName]\r\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>\r\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\r\n    relation: ViewName\r\n  ): PostgrestQueryBuilder<Schema, View, ViewName>\r\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any, any> {\r\n    const url = new URL(`${this.url}/${relation}`)\r\n    return new PostgrestQueryBuilder(url, {\r\n      headers: { ...this.headers },\r\n      schema: this.schemaName,\r\n      fetch: this.fetch,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Select a schema to query or perform an function (rpc) call.\r\n   *\r\n   * The schema needs to be on the list of exposed schemas inside Supabase.\r\n   *\r\n   * @param schema - The schema to query\r\n   */\r\n  schema<DynamicSchema extends string & keyof Database>(\r\n    schema: DynamicSchema\r\n  ): PostgrestClient<\r\n    Database,\r\n    DynamicSchema,\r\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\r\n  > {\r\n    return new PostgrestClient(this.url, {\r\n      headers: this.headers,\r\n      schema,\r\n      fetch: this.fetch,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.get - When set to `true`, the function will be called with\r\n   * read-only access mode.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\r\n    fn: FnName,\r\n    args: Fn['Args'] = {},\r\n    {\r\n      head = false,\r\n      get = false,\r\n      count,\r\n    }: {\r\n      head?: boolean\r\n      get?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<\r\n    Schema,\r\n    Fn['Returns'] extends any[]\r\n      ? Fn['Returns'][number] extends Record<string, unknown>\r\n        ? Fn['Returns'][number]\r\n        : never\r\n      : never,\r\n    Fn['Returns']\r\n  > {\r\n    let method: 'HEAD' | 'GET' | 'POST'\r\n    const url = new URL(`${this.url}/rpc/${fn}`)\r\n    let body: unknown | undefined\r\n    if (head || get) {\r\n      method = head ? 'HEAD' : 'GET'\r\n      Object.entries(args)\r\n        // params with undefined value needs to be filtered out, otherwise it'll\r\n        // show up as `?param=undefined`\r\n        .filter(([_, value]) => value !== undefined)\r\n        // array values need special syntax\r\n        .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\r\n        .forEach(([name, value]) => {\r\n          url.searchParams.append(name, value)\r\n        })\r\n    } else {\r\n      method = 'POST'\r\n      body = args\r\n    }\r\n\r\n    const headers = { ...this.headers }\r\n    if (count) {\r\n      headers['Prefer'] = `count=${count}`\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url,\r\n      headers,\r\n      schema: this.schemaName,\r\n      body,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<Fn['Returns']>)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}