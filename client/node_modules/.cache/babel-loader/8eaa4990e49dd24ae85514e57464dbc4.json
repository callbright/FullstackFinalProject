{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n/**\r\n * The {@link eachMonthOfInterval} function options.\r\n */\n\n/**\r\n * @name eachMonthOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of months within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of months within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\r\n *\r\n * @example\r\n * // Each month between 6 February 2014 and 10 August 2014:\r\n * const result = eachMonthOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Sat Feb 01 2014 00:00:00,\r\n * //   Sat Mar 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Thu May 01 2014 00:00:00,\r\n * //   Sun Jun 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * //   Fri Aug 01 2014 00:00:00\r\n * // ]\r\n */\n\nexport function eachMonthOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  const currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n} // Fallback for modularized imports:\n\nexport default eachMonthOfInterval;","map":{"version":3,"names":["toDate","eachMonthOfInterval","interval","options","startDate","start","endDate","end","reversed","endTime","currentDate","setHours","setDate","step","dates","push","setMonth","getMonth","reverse"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/eachMonthOfInterval.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link eachMonthOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachMonthOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of months within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of months within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\r\n *\r\n * @example\r\n * // Each month between 6 February 2014 and 10 August 2014:\r\n * const result = eachMonthOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Sat Feb 01 2014 00:00:00,\r\n * //   Sat Mar 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Thu May 01 2014 00:00:00,\r\n * //   Sun Jun 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * //   Fri Aug 01 2014 00:00:00\r\n * // ]\r\n */\r\nexport function eachMonthOfInterval(interval, options) {\r\n  const startDate = toDate(interval.start);\r\n  const endDate = toDate(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed ? +startDate : +endDate;\r\n  const currentDate = reversed ? endDate : startDate;\r\n  currentDate.setHours(0, 0, 0, 0);\r\n  currentDate.setDate(1);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate.setMonth(currentDate.getMonth() + step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachMonthOfInterval;\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,OAAvC,EAAgD;EACrD,MAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAACG,KAAV,CAAxB;EACA,MAAMC,OAAO,GAAGN,MAAM,CAACE,QAAQ,CAACK,GAAV,CAAtB;EAEA,IAAIC,QAAQ,GAAG,CAACJ,SAAD,GAAa,CAACE,OAA7B;EACA,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACJ,SAAJ,GAAgB,CAACE,OAAzC;EACA,MAAMI,WAAW,GAAGF,QAAQ,GAAGF,OAAH,GAAaF,SAAzC;EACAM,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;EACAD,WAAW,CAACE,OAAZ,CAAoB,CAApB;EAEA,IAAIC,IAAI,GAAGV,OAAO,EAAEU,IAAT,IAAiB,CAA5B;EACA,IAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;EACX,IAAIA,IAAI,GAAG,CAAX,EAAc;IACZA,IAAI,GAAG,CAACA,IAAR;IACAL,QAAQ,GAAG,CAACA,QAAZ;EACD;;EAED,MAAMM,KAAK,GAAG,EAAd;;EAEA,OAAO,CAACJ,WAAD,IAAgBD,OAAvB,EAAgC;IAC9BK,KAAK,CAACC,IAAN,CAAWf,MAAM,CAACU,WAAD,CAAjB;IACAA,WAAW,CAACM,QAAZ,CAAqBN,WAAW,CAACO,QAAZ,KAAyBJ,IAA9C;EACD;;EAED,OAAOL,QAAQ,GAAGM,KAAK,CAACI,OAAN,EAAH,GAAqBJ,KAApC;AACD,C,CAED;;AACA,eAAeb,mBAAf"},"metadata":{},"sourceType":"module"}