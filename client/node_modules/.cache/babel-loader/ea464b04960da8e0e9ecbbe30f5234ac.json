{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns An index of the date closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\n\nexport function closestIndexTo(dateToCompare, dates) {\n  const date = toDate(dateToCompare);\n  if (isNaN(Number(date))) return NaN;\n  const timeToCompare = date.getTime();\n  let result;\n  let minDistance;\n  dates.forEach(function (dirtyDate, index) {\n    const currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n} // Fallback for modularized imports:\n\nexport default closestIndexTo;","map":{"version":3,"names":["toDate","closestIndexTo","dateToCompare","dates","date","isNaN","Number","NaN","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","index","currentDate","distance","Math","abs"],"sources":["C:/Users/Lions/final-project-callbright-1/client/node_modules/date-fns/closestIndexTo.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns An index of the date closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\r\nexport function closestIndexTo(dateToCompare, dates) {\r\n  const date = toDate(dateToCompare);\r\n\r\n  if (isNaN(Number(date))) return NaN;\r\n\r\n  const timeToCompare = date.getTime();\r\n\r\n  let result;\r\n  let minDistance;\r\n  dates.forEach(function (dirtyDate, index) {\r\n    const currentDate = toDate(dirtyDate);\r\n\r\n    if (isNaN(Number(currentDate))) {\r\n      result = NaN;\r\n      minDistance = NaN;\r\n      return;\r\n    }\r\n\r\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\r\n    if (result == null || distance < minDistance) {\r\n      result = index;\r\n      minDistance = distance;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default closestIndexTo;\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,aAAxB,EAAuCC,KAAvC,EAA8C;EACnD,MAAMC,IAAI,GAAGJ,MAAM,CAACE,aAAD,CAAnB;EAEA,IAAIG,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAAT,EAAyB,OAAOG,GAAP;EAEzB,MAAMC,aAAa,GAAGJ,IAAI,CAACK,OAAL,EAAtB;EAEA,IAAIC,MAAJ;EACA,IAAIC,WAAJ;EACAR,KAAK,CAACS,OAAN,CAAc,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;IACxC,MAAMC,WAAW,GAAGf,MAAM,CAACa,SAAD,CAA1B;;IAEA,IAAIR,KAAK,CAACC,MAAM,CAACS,WAAD,CAAP,CAAT,EAAgC;MAC9BL,MAAM,GAAGH,GAAT;MACAI,WAAW,GAAGJ,GAAd;MACA;IACD;;IAED,MAAMS,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASV,aAAa,GAAGO,WAAW,CAACN,OAAZ,EAAzB,CAAjB;;IACA,IAAIC,MAAM,IAAI,IAAV,IAAkBM,QAAQ,GAAGL,WAAjC,EAA8C;MAC5CD,MAAM,GAAGI,KAAT;MACAH,WAAW,GAAGK,QAAd;IACD;EACF,CAdD;EAgBA,OAAON,MAAP;AACD,C,CAED;;AACA,eAAeT,cAAf"},"metadata":{},"sourceType":"module"}