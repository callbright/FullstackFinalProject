{"ast":null,"code":"var _jsxFileName = \"/Users/ChristianAllbright/final-project-callbright/client/src/components/PostDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostDetail = () => {\n  _s();\n\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState('');\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchPost();\n    fetchComments();\n  }, [id]);\n\n  const fetchPost = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('criteria').select('*').eq('id', id).single();\n\n    if (error) {\n      console.error('Error fetching post:', error);\n    } else {\n      setPost(data);\n    }\n  };\n\n  const fetchComments = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('comments').select('*').eq('post_id', parseInt(id)); // Ensuring the post_id is treated as an integer\n\n    if (error) {\n      console.error('Error fetching comments:', error);\n    } else {\n      setComments(data);\n    }\n  };\n\n  const handleCommentChange = event => {\n    setComment(event.target.value);\n  };\n\n  const postComment = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('comments').insert([{\n      post_id: parseInt(id),\n      content: comment,\n      created_at: new Date().toISOString()\n    }]);\n\n    if (error) {\n      console.error('Error posting comment:', error);\n      alert('Failed to post comment. Please try again!');\n    } else if (data && data.length > 0) {\n      setComments([...comments, data[0]]);\n      setComment(''); // Clear the input field after posting.\n\n      alert('Comment added successfully!');\n    } else {\n      console.error('Received no data from the insert operation:', data);\n      alert('No comment was added, please try again.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: post ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Add a comment...\",\n            value: comment,\n            onChange: handleCommentChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: postComment,\n            children: \"Post Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading post details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostDetail, \"Jrtw1lyGpjxElWL+qlBd/Zz/kbA=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = PostDetail;\nexport default PostDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","supabase","PostDetail","post","setPost","comments","setComments","comment","setComment","id","navigate","fetchPost","fetchComments","data","error","from","select","eq","single","console","parseInt","handleCommentChange","event","target","value","postComment","insert","post_id","content","created_at","Date","toISOString","alert","length","title","map","index"],"sources":["/Users/ChristianAllbright/final-project-callbright/client/src/components/PostDetail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { supabase } from '../client';\n\nconst PostDetail = () => {\n    const [post, setPost] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState('');\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        fetchPost();\n        fetchComments();\n    }, [id]);\n\n    const fetchPost = async () => {\n        const { data, error } = await supabase\n            .from('criteria')\n            .select('*')\n            .eq('id', id)\n            .single();\n\n        if (error) {\n            console.error('Error fetching post:', error);\n        } else {\n            setPost(data);\n        }\n    };\n\n    const fetchComments = async () => {\n        const { data, error } = await supabase\n            .from('comments')\n            .select('*')\n            .eq('post_id', parseInt(id)); // Ensuring the post_id is treated as an integer\n    \n        if (error) {\n            console.error('Error fetching comments:', error);\n        } else {\n            setComments(data);\n        }\n    };\n    \n\n    const handleCommentChange = (event) => {\n        setComment(event.target.value);\n    };\n\n    const postComment = async () => {\n        const { data, error } = await supabase\n            .from('comments')\n            .insert([\n                { \n                    post_id: parseInt(id),\n                    content: comment,\n                    created_at: new Date().toISOString()\n                }\n            ]);\n    \n        if (error) {\n            console.error('Error posting comment:', error);\n            alert('Failed to post comment. Please try again!');\n        } else if (data && data.length > 0) {\n            setComments([...comments, data[0]]);\n            setComment('');  // Clear the input field after posting.\n            alert('Comment added successfully!');\n        } else {\n            console.error('Received no data from the insert operation:', data);\n            alert('No comment was added, please try again.');\n        }\n    };\n    \n    \n\n    return (\n        <div>\n            {post ? (\n                <div>\n                    <h1>{post.title}</h1>\n                    <p>{post.content}</p>\n                    <div>\n                        <h2>Comments</h2>\n                        {comments.map((comment, index) => (\n                            <div key={index}>\n                                <p>{comment.content}</p>\n                            </div>\n                        ))}\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Add a comment...\"\n                                value={comment}\n                                onChange={handleCommentChange}\n                            />\n                            <button onClick={postComment}>Post Comment</button>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <p>Loading post details...</p>\n            )}\n        </div>\n    );\n};\n\nexport default PostDetail;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}